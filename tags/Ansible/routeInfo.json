{"path":"tags/Ansible","templateID":4,"sharedPropsHashes":{"tags":"1C8cqm"},"localProps":{"posts":[{"title":"Vagrant & Ansible 快速入门教程","cover":"http://p6jqy6mfr.bkt.clouddn.com/stock-photo-183601741.jpg","iso8601Date":"2015-11-08T08:39:10+08:00","basename":"Vagrant-Ansible-quick-intro","tags":["Ansible","Translate","Vagrant","Backend"],"date":"2015-11-08","cate":"backend","summary":"原文地址  \n\n就个人而言，我用过Chef，Puppet，简单的Bash脚本等用来配置服务器，其他服务和Vagrant Boxes。虽然Chef社区仍然在快速成长，但是我发布的关于Chef的文章仍然是最受欢迎的文章。然而，两个月之前，当我在一个项目中使用Ansible的时候所有的事情都变了。从此之后我再也没用过其他的配置工具，也找不到用其他工具的理由了。  \n\n看过了不少关于Ansible的教程，尝试这从中找出相应的模式和最佳实战，然而似乎在知识上有巨大的横沟。你可以用Ansible做很多事情，你也可以同时学习如何使用，但是跟我最新学习的工具一样，却反一个很简单地方入手学习的地方。今天我希望通过使用Vagrant和Ansible配置一个LAMP的技术栈来纠正他。  \n\n为什么使用Ansible\n\nAnsible和其他的配置管理工具最主要的区别就是Ansible是基于SSH的。Chef和Puppet都是有依赖的，而且必须在服务器上安装之后才能使用，而Ansible则不需要。它可以在你本机运行，使用SSH连接相应主机，在其运行相应命令。  \n\n为什么不直接使用Bash脚本呢？Ansible之所以比Bash脚本好是因为他简单。Ansible只是运行了一系列使用YAML格式编写的任务。同样Ansible还具有幂等性，这就意味着你可以多次运行同样的任务，并且这些任务的输入会保持一致（例如除非明确要求运行两次否则它不会对同一个任务运行两次）。同样这个可以通过Bash脚本编写，但是会很复杂。\n\nAnsible 和 Vagrant\n\n首先给你要确定已经安装了Ansible和Vagrant。它们的安装文档可以在它们的相关网站找到，它们都很容易安装的。\n\n基础\n\n我们将会创建一个新的文件夹来开始我们的项目。\n\nbash\nmkdir -p ~/Projects/vagrant-ansible\ncd ~/Projects/vagrant-ansible\n\n\n接着我们创建一个基于最新的Ubuntu的Vagrantfile。\n\nbash\nvagrant init ubuntu/trusty64\n\n\n运行完这个命令后在项目目录下会有一个叫Vagrantfile的文件。它包含了你想要配置的关于box的一些基本信息和一堆你现在不需要管的注释。删除所有的注释，你就会简单的得到以下的代码：\n\nbash\nVAGRANTFILE_API_VERSION = &quot;2&quot;\nVagrant.configure(VAGRANTFILE_API_VERSION) do |config|\n  config.vm.box = &quot;ubuntu/trusty64&quot;\nend\n\n\n我们需要在他配置好的适合访问服务器，所以我们将会吧Vagrant的80端口转发到本机的8080端口，将以下代码添加到end之前。\n\nbash\nconfig.vm.network &quot;forworded_port&quot;, guest: 80, host:8080\n\n\n现在Vagrant只需要配置一件事情。我们需要配置Vagrant使用Ansible作为配置器，并且知道去哪里需找这些命令。为了实现这个目的，我们将一下代码加到Vagrantfile的end之前。\n\nbash\nconfig.vm.provision :ansible do |ansible|\n  ansible.playbook = &quot;playbook.yml&quot;\nend\n\n\n以上所有的任务完成之后你的Vagrantfile将会是一下的配置。  \n\n`bash\nVAGRANTFILEAPIVERSION = &quot;2&quot;\n\nVagrant.configure(VAGRANTFILEAPIVERSION) do |config|\n  config.vm.box = &quot;ubuntu/trusty64&quot;\n\n  config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8080\n\n  config.vm.provision :ansible do |ansible|\n    ansible.playbook = &quot;playbook.yml&quot;\n  end\nend\n`\n\n基本术语\n\nAnsible再你的服务器上运行一系列的Tasks。把Task想象成一个单一的Bash命令。接着是playbook，Ansible通过Playbook得知将再服务器上运行什么任务。每一个Task运行一个Ansible的Module，Module是Ansible内建的各种命令，例如yun，创建用户等。稍后就会明白这些术语的具体意思。  \n\n第一个Playbook\n\n创建一个叫playbook.yml的文件，这个名字必须和Vagrantfile的ansible.playbook相同。\n\n所有Ansible的Playbook都必须是YAML格式的。传统上YAML文件是以三条横线开头的，但是Ansible并不是强制要求的，不过社区仍然会遵循这个规则。  \n\n新建的playbook是一个YAML的列表。这个列表应该包括要管理的host和各种要运行的task，将以下代码添加到playbook.yml文件中。\n\n```bash\n\nhost: all\nsudo: true\ntasks:\n`\n\n我们使用Vagrant并且只有一台主机，所以我们可以使用一个魔法值all，意思是在所有的机器上运行任务。然后我们告诉Ansible运行是需要sudo权限，最后我们添加了 tasks: 用来添加Task。\n\n要安装LAMP技术栈的基本步骤是：1. 更新 Apt Cache\n2. 安装 Apache\n3. 安装 MySQL\n4. 安装 PHP\n\n这就是所有我们必须的步骤。因为我们用的是Ubuntu的box，所有我们需要Ansible的apt模块。\n\n首先我们给每一个task一个name:，这个可以是任何描述，它用来描述这个任务，如下:\n\nbash\n- name: this should be some descriptive text\n\n\n接着我们指定一个Ansible的模块作为值，在本例中使用的是apt模块。\n\nbash\napt\n\n\n紧随其后的是一些key=value的由空格分隔的键值对。选择你想要传递给Ansible的键值对，可以通过Ansible的文档来查询所需要的键值对。\n\n安装Apache的任务如下：\n\nbash\n- name: install apache\n  apt: name=apache2 state=present\n\n\n这样就配置好了，很简单，对吧。我们将继续添加MySQL和PHP的Task到playbook.yml中，最后代码如下：\n\n```bash\n\nhosts: all\nsudo: true\ntasks:name: update apt cache\napt: update_cache=yesname: install apache\napt: name=apache2 state=presentname: install mysql\napt: name=mysql-server state=presentname: install php\napt: name=php5 state=present\n`\n\n现在我们已经配置完了，然后运行vagrant up，你将会看到如下图所示：\n  \n\n这样就搭建好了。如果你想让LAMP运行起来，你就可以ssh到Vagrant，然后将info.php文件添加到/var/www/html下。\nphp\n&lt;?php phpinfo();?&gt;\n\n\n然后在本机浏览器打开http://localhost:8080/info.php，就会看到你想要看到的。\n\n翻译到此，剩下的就是关于Ansible的使用了，这些可以通过Ansible的官方文档来学习","readingtime":8,"url":"/cates/backend/post/2015-11-08/Vagrant-Ansible-quick-intro","dirs":["vagrant"],"relatives":[{"url":"/cates/backend/post/2015-11-07/Vagrant-intro","title":"Vagrant 入门指南"}]},{"title":"Ansible 入门指南","cover":"http://p6jqy6mfr.bkt.clouddn.com/stock-photo-41436438.jpg","iso8601Date":"2015-11-10T02:26:35+08:00","basename":"Ansible-introduction","tags":["Ansible","Translate","Backend"],"date":"2015-11-10","cate":"backend","summary":"原文地址\n\n快速入门\n\n前言\n\n 现在你已经知道如何安装Ansible了，现在可以深入并开始使用Ansible的一些命令了。\n 我们开始展示的并不是Ansible强大的配置、部署、调度的功能。这些功能由其他章节要讲的Playbook来处理。\n 这个章节是关于如何快速入门的。等你了解了Ansible的这些概念之后，就可以阅读特别命令简介来学习更多细节，接着你就可以深入理解Playbook，并且浏览更多的有趣功能。\n\n远程连接信息\n\n 在我们开始学习之前，理解Ansible是如何通过SSH连接到远程服务器是很重要的。\n 默认情况下，如果可以，Ansible 1.3 及其后续版本会使用原生的OpenSSh来连接远程服务器。这样就可以在~/.ssh/config下开启ControPersist(一个高性能的功能),Kerbos和其他选项，例如跳板机设置。然后，如果使用了Enterprise Linux 6(Red Hat Enterprise Linux 和其衍生版本，例如CentOS) 系统作为控制机，OpenSSH的版本可能过低导致无法开启ControlPersist功能。在这些操作系统中，Ansible将会回退到使用“paramiko”，他是OpenSSH的一个高质量的Python实现。如果你想使用像Kerberized SSH 等这样的功能，那么可以使用Federa，OSX或者Ubuntu作为你的控制机，直到你使用的平台有了更新的OpenSSH，或者你可以开启加速功能。加速功能。\n 如果使用的版本小于等于1.2，那么默认使用的就是paramiko，如果想要使用原生的SSH，那么需要加上-c ssh 选项或者再配置文件中配置。\n 可能偶尔在某些机器上不支持SFTP协议，虽然这种情况很少，但是也可能发生，这个时候可以在配置文件中切换到SCP模式。\n 当需要和远程主机会话是，Ansible默认假设你使用SSH keys。Ansible鼓励使用SSH 免密码登陆，但是使用密码登陆也是可以的，在使用的时候加上参数--ask-pass。如果需要使用sudo权限，那么也要提供--ask-sudo-pass参数。\n 任何管理系统运行时离被管理的系统越近越好。虽然这是个常识，但是还是值得分享的。如果你在云端使用Ansible，那么就把Ansible运行在云端。在大多数情况下，它都比直接在公共网络上运行更好。\n 作为一个高级话题，Ansible并不仅仅通过SSH连接主机。连接系统是可插拔的，有很多配置选项可以用来本地管理，例如管理chroot，lxc，jail container。一个叫做“Ansible-pull”的模式可以反转系统。通过配置好的git checkout 从中央存储库pull配置文件获取系统的“phone home”。\n\n第一个命令\n\n 目前为止，已经安装好Ansible了，现在可以开始运行一些简单的命令了。\n 编辑（或者创建）/etc/ansible/hosts文件，向其添加一个或者多个远程主机地址。本机的public ssh key 应该已经追加到远程主机的authorized_keys文件中。\n\nbash\n192.168.1.50\naserver.example.org\nbserver.example.org\n\n\n 这是一个清单文件，同样会再主机清单中介绍。\n 假设你使用的是SSH授权方式，设置ssh angent 防止重复输入密码。\n\nbash\nssh-agent bash\nssh-add ~/.ssh/id_rsa\n\n\n(根据你的设置，你可能需要使用--private-key选项来制定一个pem文件)\n 现在可以ping一下所有的主机了。\n\nbash\nansible all -m ping\n\n\n Ansible会想SSH那样使用你本机的用户名去连接远程机器，如果不想使用本机用户名，可以加上-u的选项。\n 如果你想使用sudo权限，同样也可以将上--sudo选项。\n\n`bash\n\nas bruce\n\n$ ansible all -m ping -u bruce\n\nas bruce sudoing to root\n\n$ ansible all -m ping -u bruce --sudo\n\nas bruce, sudoing to batman\n\n$ ansible all -m ping -u bruce --sudo --sudo-user batman\n\nWith latest version of ansible sudo is deprecated so use become\n\nas bruce, sudoing to root\n\n$ ansible all -m ping -u bruce -b\n\nas bruce, sudoing to batman\n\n$ ansible all -m ping -u bruce -b --become-user batman\n`\n\n(如果你突然想改变sudo 用户，可以再配置文件中修改。传递给sudo的标记例如-H也可以在那修改。)\n\n 现在在你所有的节点上运行一个实时的命令。\n\nbash\n$ ansible all -a &quot;/bin/echo hello&quot;\n\n\n 太棒了，刚刚通过Ansible与远程主机会话了。很快就可以阅读更多命令介绍来学习更多的实际例子，浏览各个模块都可以做什么，以及学习Ansible Playbooks的语法。Ansible不仅仅只能用来运行命令，他还有强大的配置管理系统和部署功能。还有许多需要学习的知识，但是你现在已经有一个完全可以运行的环境了。\n\n主机密钥检查\n\n Ansible 1.2.1 及其之后的版本，默认是有主机密钥检查功能的。\n 如果远程主机成新安装并且在know_hosts下有一个不同的key，直到修复之前，Ansible会一直返回错误。如果主机没有在know_hosts文件中，那么会出现提示来确认密钥。这样就会有一个你不希望的提示。\n&amp;emps; 如果你知道这个功能的影响，并且希望关闭这个功能，可以修改/etc/ansible/ansible.cfg或者是~/.ansible.cfg来关闭这个功能。\n\nbash\n[default]\nhost_key_checking = False\n\n\n 同样也可以通过环境变量来修改。\n\nbash\n$ export ANSIBLE_HOST_KEY_CHECKING=False\n\n\n 同时要注意主机密钥检查再paramiko模式中是很慢的，所以如果要使用这个功能最好使用ssh模式。\n 除非Ansible的任务被标记为&quot;nolog:True&quot;，否则Ansible会再远程注意的syslog中记录一些有用的信息。这个稍后再做解释。\n 如果要再本机开启log可以查看配置章节来设置“logpath”开启。企业用户可能会对Ansible Tower。Tower提供了一个健壮的数据库记录日志的功能，这样就可以随时通过图形界面或者REST API 来查看主机，项目，特殊的列表的日志。","readingtime":6,"url":"/cates/backend/post/2015-11-10/Ansible-introduction","dirs":["ansible"],"relatives":[]}],"tag":"Ansible"}}