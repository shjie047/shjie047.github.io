{"path":"cates/backend/post/2018-04-10/spring-mvc-controller","templateID":4,"sharedPropsHashes":{"tags":"1C8cqm"},"localProps":{"post":{"title":"SpringMVC 教程 - Controller","cover":"http://p6jqy6mfr.bkt.clouddn.com/stock-photo-244371365.jpg","iso8601Date":"2018-04-10T08:39:10+08:00","basename":"spring-mvc-controller","tags":["Backend","Java","SpringMVC","Spring"],"date":"2018-04-10","cate":"backend","summary":"声明Controller\n\nController也是一个标准的Spring bean，可以在Servlet的WebApplicationContext中定义。也可以使用@Controller注解，Spring会扫描注解自动注册为Spring的bean。\n开启自动注册@Controller注解的bean可以使用如下Java Config的配置：\n`Java\n@Configuration\n@ComponentScan(&quot;org.example.web&quot;)\npublic class WebConfig {\n\n// ...\n\n}\n\n如果使用xml配置，如下：\nxml\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    xmlns:p=&quot;http://www.springframework.org/schema/p&quot;\n    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;\n    xsi:schemaLocation=&quot;\n        http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;\n\n&lt;context:component-scan base-package=&quot;org.example.web&quot;/&gt;\n\n&lt;!-- ... --&gt;\n\n&lt;/beans&gt;\n`\n\n请求映射\n\n@RequestMapping可以将请求映射到具体的Controller方法上。通过找到匹配的url，http 方法，请求参数，header，媒体类型来映射请求。这个注解既可以用在类级别，也可以用在方法级别上。\n为了方便@RequestMapping根据HTTP方法不同提供了如下快捷注解：\n  - @GetMapping\n  - @PostMapping\n  - @DeleteMapping\n  - @PutMapping\n  - @PatchMapping\n\n示例如下所示：\n`Java\n@RestController\n@RequestMapping(&quot;/persons&quot;)\nclass PersonController {\n\n@GetMapping(&quot;/{id}&quot;)\npublic Person getPerson(@PathVariable Long id) {\n    // ...\n}\n\n@PostMapping\n@ResponseStatus(HttpStatus.CREATED)\npublic void add(@RequestBody Person person) {\n    // ...\n}\n\n}\n`\n\nURI 模式\n\n请求映射支持glob模式和通配符\n  - ? 匹配一个字符\n  - * 匹配0个或多个字符\n  - ** 匹配0个或多个路径\n可以通过@PathVariable 访问在URI中定义的变量：\nJava\n@GetMapping(&quot;/owners/{ownerId}/pets/{petId}&quot;)\npublic Pet findPet(@PathVariable Long ownerId, @PathVariable Long petId) {\n    // ...\n}\n \nURI的变量可以在类和方法中定义：\n`Java\n@Controller\n@RequestMapping(&quot;/owners/{ownerId}&quot;)\npublic class OwnerController {\n\n@GetMapping(&quot;/pets/{petId}&quot;)\npublic Pet findPet(@PathVariable Long ownerId, @PathVariable Long petId) {\n    // ...\n}\n\n}\n`","readingtime":5,"url":"/cates/backend/post/2018-04-10/spring-mvc-controller","dirs":["spring-mvc"],"relatives":[{"url":"/cates/backend/post/2018-04-07/deep-in-spring-mvc","title":"深入理解Spring MVC"},{"url":"/cates/backend/post/2018-04-09/spring-mvc-dispatcher-servlet","title":"SpringMVC 教程 - DispatcherServlet"},{"url":"/cates/backend/post/2018-04-09/spring-mvc-filter","title":"SpringMVC 教程 - Filter"}],"body":"\n\n##### 声明Controller\nController也是一个标准的Spring bean，可以在Servlet的`WebApplicationContext`中定义。也可以使用`@Controller`注解，Spring会扫描注解自动注册为Spring的bean。\n开启自动注册`@Controller`注解的bean可以使用如下Java Config的配置：\n```Java\n@Configuration\n@ComponentScan(\"org.example.web\")\npublic class WebConfig {\n\n    // ...\n}\n```\n如果使用xml配置，如下：\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:p=\"http://www.springframework.org/schema/p\"\n    xmlns:context=\"http://www.springframework.org/schema/context\"\n    xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\">\n\n    <context:component-scan base-package=\"org.example.web\"/>\n\n    <!-- ... -->\n\n</beans>\n```\n##### 请求映射\n`@RequestMapping`可以将请求映射到具体的Controller方法上。通过找到匹配的url，http 方法，请求参数，header，媒体类型来映射请求。这个注解既可以用在类级别，也可以用在方法级别上。\n为了方便`@RequestMapping`根据HTTP方法不同提供了如下快捷注解：\n  - @GetMapping\n  - @PostMapping\n  - @DeleteMapping\n  - @PutMapping\n  - @PatchMapping\n\n示例如下所示：\n```Java\n@RestController\n@RequestMapping(\"/persons\")\nclass PersonController {\n\n    @GetMapping(\"/{id}\")\n    public Person getPerson(@PathVariable Long id) {\n        // ...\n    }\n\n    @PostMapping\n    @ResponseStatus(HttpStatus.CREATED)\n    public void add(@RequestBody Person person) {\n        // ...\n    }\n}\n```\n##### URI 模式\n请求映射支持glob模式和通配符\n  - `?` 匹配一个字符\n  - `*` 匹配0个或多个字符\n  - `**` 匹配0个或多个路径\n可以通过`@PathVariable` 访问在URI中定义的变量：\n```Java\n@GetMapping(\"/owners/{ownerId}/pets/{petId}\")\npublic Pet findPet(@PathVariable Long ownerId, @PathVariable Long petId) {\n    // ...\n}\n``` \nURI的变量可以在类和方法中定义：\n```Java\n@Controller\n@RequestMapping(\"/owners/{ownerId}\")\npublic class OwnerController {\n\n    @GetMapping(\"/pets/{petId}\")\n    public Pet findPet(@PathVariable Long ownerId, @PathVariable Long petId) {\n        // ...\n    }\n}\n```\n"}}}