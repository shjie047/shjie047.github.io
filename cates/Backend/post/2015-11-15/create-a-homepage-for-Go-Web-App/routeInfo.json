{"path":"cates/Backend/post/2015-11-15/create-a-homepage-for-Go-Web-App","templateID":1,"sharedPropsHashes":{"tags":"Zpc8p0"},"localProps":{"post":{"title":"为Go Web App 创建一个主页面","cover":"https://p6jqy6mfr.bkt.clouddn.com/stock-photo-252035635.jpg","iso8601Date":"2015-11-15T01:59:00+08:00","basename":"create-a-homepage-for-Go-Web-App","tags":["Go","Translate","Backend"],"date":"2015-11-15","cate":"Backend","summary":"原文地址\n\n 大多数web app都有一个相同的布局。这个布局可能包含一个header或者footer，甚至可能包含一个导航菜单。Go的标准库提供一个简单的方式来创建这些基本元素，通过被不同的页面重用，创建出模板页的效果。\n 这个简单的例子来解释如何实现的：\n 让我们来创建一个简单的包含两个view的web app，一个是 main 一个是about。这两个view都有相同的header和footer。\n header模板的代码如下：\n\nhtml\n{ { define &quot;header&quot; }}\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;{ {.Title}}&lt;/title&gt;\n        &lt;link rel=&quot;stylesheet&quot; href=&quot;//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;&gt;\n        &lt;link rel=&quot;stylesheet&quot; href=&quot;//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-theme.min.css&quot;&gt;\n        &lt;style type=&quot;text/css&quot;&gt;\n            body {padding-bottom: 70px;}\n            .content {margin:10px;}\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;nav class=&quot;navbar navbar-default&quot; role=&quot;navigation&quot;&gt;\n          &lt;div class=&quot;navbar-header&quot;&gt;\n            &lt;a class=&quot;navbar-brand&quot; href=&quot;/&quot;&gt;Go App&lt;/a&gt;\n          &lt;/div&gt;\n          &lt;div class=&quot;collapse navbar-collapse navbar-ex1-collapse&quot;&gt;  \n            &lt;ul class=&quot;nav navbar-nav&quot;&gt;\n                &lt;li&gt;&lt;a href=&quot;/&quot;&gt;Main&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=&quot;/about&quot;&gt;About&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n          &lt;/div&gt;\n        &lt;/nav&gt;\n{ { end }}\n\n\n footer模板的代码如下：\n\n`html\n{ { define &quot;footer&quot; }}\n        &lt;p class=&quot;navbar-text navbar-fixed-bottom&quot;&gt;Go Rocks!&lt;/p&gt;          &lt;script src=&quot;//netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n{ { end }}\n\n`\n\n main 模板的代码如下：\n\nhtml\n{ {define &quot;main&quot;}}\n{ { template &quot;header&quot; .}}\n&lt;div class=&quot;content&quot;&gt;\n    &lt;h2&gt;Main&lt;/h2&gt;\n    &lt;div&gt;This is the Main page&lt;/div&gt;\n&lt;/div&gt;\n{ {template &quot;footer&quot; .}}\n{ { end}}\n\n\n about 模板的代码如下：\n\nhtml\n{ {define &quot;about&quot;}}\n{ { template &quot;header&quot; .}}\n&lt;div class=&quot;content&quot;&gt;\n    &lt;h2&gt;About&lt;/h2&gt;\n    &lt;div&gt;This is the About page&lt;/div&gt;\n&lt;/div&gt;\n{ {template &quot;footer&quot; .}}\n{ { end}}\n\n\n 服务器代码如下：\n\n`Go\npackage main\n\nimport (\n    &quot;html/template&quot;\n    &quot;net/http&quot;\n)\n\n//Compile templates on start\nvar templates = template.Must(template.ParseFiles(&quot;header.html&quot;, &quot;footer.html&quot;, &quot;main.html&quot;, &quot;about.html&quot;))\n\n//A Page structure\ntype Page struct {\n    Title string\n}\n\n//Display the named template\nfunc display(w http.ResponseWriter, tmpl string, data interface{}) {\n    templates.ExecuteTemplate(w, tmpl, data)\n}\n\n//The handlers.\nfunc mainHandler(w http.ResponseWriter, r *http.Request) {\n    display(w, &quot;main&quot;, &amp;Page{Title: &quot;Home&quot;})\n}\n\nfunc aboutHandler(w http.ResponseWriter, r *http.Request) {\n    display(w, &quot;about&quot;, &amp;Page{Title: &quot;About&quot;})\n}\n\nfunc main() {\n    http.HandleFunc(&quot;/&quot;, mainHandler)\n    http.HandleFunc(&quot;/about&quot;, aboutHandler)\n\n//Listen on port 8080\nhttp.ListenAndServe(&quot;:8080&quot;, nil)\n\n}\n`\n\n 每一个模板页都有一个 { { define &quot;name&quot; }}的命令来定义模板的名字。main和about页面通过{ { template &quot;name&quot; }}来包含header和footer。. 出入上下文来命名模板。现在，不管main和about页面如何执行，他们的页面都会包含header和footer。\n 两个页面的结果如下：\n\n  ","readingtime":6,"url":"/cates/Backend/post/2015-11-15/create-a-homepage-for-Go-Web-App","dirs":["go"],"relatives":[{"url":"/cates/Backend/post/2015-11-11/Go-Web-architecture","title":"Go Web 架构"},{"url":"/cates/Backend/post/2015-11-12/HTTP-2-And-GO","title":"HTTP/2 和GO"},{"url":"/cates/Backend/post/2015-11-12/develop-HTTP-middleware-using-Go","title":"使用Go开发HTTP中间件"},{"url":"/cates/Backend/post/2015-11-13/http-Handler-And-Go-error-handle","title":"http.Handler 与Go的错误处理"}],"body":"\n\n\n[原文地址](http://sanatgersappa.blogspot.com/2013/11/creating-master-page-for-your-go-web-app.html)\n\n 大多数web app都有一个相同的布局。这个布局可能包含一个header或者footer，甚至可能包含一个导航菜单。Go的标准库提供一个简单的方式来创建这些基本元素，通过被不同的页面重用，创建出模板页的效果。\n 这个简单的例子来解释如何实现的：\n 让我们来创建一个简单的包含两个view的web app，一个是 main 一个是about。这两个view都有相同的header和footer。\n header模板的代码如下：\n\n```html\n{ { define \"header\" }}\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>{ {.Title}}</title>\n        <link rel=\"stylesheet\" href=\"//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css\">\n        <link rel=\"stylesheet\" href=\"//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-theme.min.css\">\n        <style type=\"text/css\">\n            body {padding-bottom: 70px;}\n            .content {margin:10px;}\n        </style>\n    </head>\n    <body>\n        <nav class=\"navbar navbar-default\" role=\"navigation\">\n          <div class=\"navbar-header\">\n            <a class=\"navbar-brand\" href=\"/\">Go App</a>\n          </div>\n          <div class=\"collapse navbar-collapse navbar-ex1-collapse\">  \n            <ul class=\"nav navbar-nav\">\n                <li><a href=\"/\">Main</a></li>\n                <li><a href=\"/about\">About</a></li>\n            </ul>\n          </div>\n        </nav>\n{ { end }}\n```\n\n footer模板的代码如下：\n\n\n```html\n{ { define \"footer\" }}\n        <p class=\"navbar-text navbar-fixed-bottom\">Go Rocks!</p>    \n        <script src=\"//netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js\"></script>\n    </body>\n</html>\n{ { end }}\n\n```\n\n main 模板的代码如下：\n\n```html\n{ {define \"main\"}}\n{ { template \"header\" .}}\n<div class=\"content\">\n    <h2>Main</h2>\n    <div>This is the Main page</div>\n</div>\n{ {template \"footer\" .}}\n{ { end}}\n```\n\n about 模板的代码如下：\n\n```html\n{ {define \"about\"}}\n{ { template \"header\" .}}\n<div class=\"content\">\n    <h2>About</h2>\n    <div>This is the About page</div>\n</div>\n{ {template \"footer\" .}}\n{ { end}}\n```\n\n 服务器代码如下：\n\n```Go\npackage main\n\nimport (\n    \"html/template\"\n    \"net/http\"\n)\n\n//Compile templates on start\nvar templates = template.Must(template.ParseFiles(\"header.html\", \"footer.html\", \"main.html\", \"about.html\"))\n\n//A Page structure\ntype Page struct {\n    Title string\n}\n\n//Display the named template\nfunc display(w http.ResponseWriter, tmpl string, data interface{}) {\n    templates.ExecuteTemplate(w, tmpl, data)\n}\n\n//The handlers.\nfunc mainHandler(w http.ResponseWriter, r *http.Request) {\n    display(w, \"main\", &Page{Title: \"Home\"})\n}\n\nfunc aboutHandler(w http.ResponseWriter, r *http.Request) {\n    display(w, \"about\", &Page{Title: \"About\"})\n}\n\nfunc main() {\n    http.HandleFunc(\"/\", mainHandler)\n    http.HandleFunc(\"/about\", aboutHandler)\n\n    //Listen on port 8080\n    http.ListenAndServe(\":8080\", nil)\n}\n```\n\n 每一个模板页都有一个 `{ { define \"name\" }}`的命令来定义模板的名字。main和about页面通过`{ { template \"name\" }}`来包含header和footer。`.` 出入上下文来命名模板。现在，不管main和about页面如何执行，他们的页面都会包含header和footer。\n 两个页面的结果如下：\n\n![main](https://raw.githubusercontent.com/mashuai/hexo-blog/master/goweb/main.png)  \n![about](https://raw.githubusercontent.com/mashuai/hexo-blog/master/goweb/about.png)  \n"}}}