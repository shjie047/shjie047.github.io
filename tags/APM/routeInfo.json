{"path":"tags/APM","templateID":4,"sharedPropsHashes":{"tags":"Zpc8p0"},"localProps":{"posts":[{"title":"8个关键的应用性能指标","cover":"http://p6jqy6mfr.bkt.clouddn.com/APM-Metrics-793x397.webp","iso8601Date":"2018-04-07T08:39:10+08:00","basename":"8-key-application-metrics","tags":["APM","Performance"],"date":"2018-04-07","cate":"Others","summary":"原文地址  \n\n用户满意度/Apdex 分数\n\n应用性能指数或者Apdex分数，已经变成追踪应用反应性能的工业标准。\n通过定义指标：一个指定的web请求或者事务达到这个指标的时间是多久。\n这些事务可以被分为满意（快），可容忍（慢），太慢，请求失败。可以用下面这个简单的数学公式来表示，分数范围从0到1.\n\n\n平均响应时间\n\n首先先说明一点，平均非常傻。非常推荐使用上述的用户满意度Apedx分数来追踪性能问题。平均响应时间有时仍然是一个有用的指标。\n\n错误率\n\n最不想用户看到的就是错误。监控错误率是一个应用的重要性能指标。\n主要有以下三种错误：\n  - HTTP 错误-web请求错误的个数\n  - 日志异常： 在应用中未处理的，打印出来的异常日志\n  - 抛出异常： 所有抛出的异常\n\n应用实例的个数\n\n如果应用是部署在云上。那么就知道你的服务器/应用实例到底有多少在运行就很重要了。自动伸缩可以帮助应用按需伸缩同时也能在飞峰值时节省资源。\n\n请求率\n\n了解你的应用接收了多少流量对你应用的成功有显著的影响。一般来说其他的性能指标都被流量的增加和减少所影响。\n请求率可以很容易的和其他的性能指标结合起来显示出你的应用时如何动态扩展的。\n监控请求率可以很好的监控峰值或者低谷。如果你有一个频繁访问的API，突然一点流量都没有了，那么这就需要小心了。\n一个相似，但是略有不同的指标就是追踪并发用户量。\n\n应用和服务器CPU\n\n如果CPU使用率特别高，那么应用肯定有性能问题。监控CPU使用是服务器和应用最基本也是最重要的指标。\n几乎所有的服务器或者应用监控工具都能追踪CPU使用，同时提供告警。对每一台服务器追踪他们的CPU使用率是很重要的，同样重要的是追踪一个应用的一组CPU的使用率。\n\n应用可用性\n\n监控应用是否在线和可用是一个关键的指标。\n如果是一个Web应用，最简单的方式就是设置几个定时任务来检查HTTP，是否可用。\n\n垃圾回收\n\n如果使用的是Java相关语言，则需要注意垃圾回收器的效率。","readingtime":3,"url":"/cates/Others/post/2018-04-07/8-key-application-metrics","dirs":[],"relatives":[]}],"tag":"APM"}}