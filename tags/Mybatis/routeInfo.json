{"path":"tags/Mybatis","templateID":4,"sharedPropsHashes":{"tags":"1C8cqm"},"localProps":{"posts":[{"title":"mybatis 入门","cover":"http://p6jqy6mfr.bkt.clouddn.com/stock-photo-235699493.jpg","iso8601Date":"2017-03-21T19:58:14+08:00","basename":"mybatis-started","tags":["Java","Mybatis","Translate","Backend"],"date":"2017-03-21","cate":"backend","summary":"原文链接\n\n安装\n\n使用Mybatis只需要将mybatis-x.x.x.jar添加到类路径即可。\n如果使用maven只需要将下列代码添加到pom.xml中。\nxml\n&lt;dependency&gt;\n  &lt;groupId&gt;org.mybatis&lt;/groupId&gt;\n  &lt;artifactId&gt;mybatis&lt;/artifactId&gt;\n  &lt;version&gt;x.x.x&lt;/version&gt;\n&lt;/dependency&gt;\n\n\n根据XML配置构建SqlSessionFactory\n\n每一个Mybatis应用都围绕SqlSessionFactory展开。一个SqlSessionFactory实例由SqlSessionFactoryBuilder创建。SqlSessionFacotryBuilder可以通过XML的配置文件或者一个配置好的Configuration类来创建SqlSessionFactory。\n根据XML配置来构建SqlSessionFacotry非常的简单。推荐使用在类路径来配置，但是同样可以使用任何的InputStream实例，包括一个普通的文件路径或者是file:// 的URL。Mybatis有一个叫Resource的工具函数，可以很容易的从类路径或者其他文件路径加载资源。\nJava\nString resource = &quot;org/mybatis/example/mybatis-config.xml&quot;;\nInputStream inputStream = Resources.getResourceAsStream(resource);\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n\nXML配置文件包含了Mybatis的核心设置，包括对应数据库连接的数据源，同样还有一个事务管理器来决定事务的范围和控制。完整的XML配置稍后会在文档中列出，下面是一个示例配置。\nxml\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE configuration\n  PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;\n  &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;\n&lt;configuration&gt;\n  &lt;environments default=&quot;development&quot;&gt;\n    &lt;environment id=&quot;development&quot;&gt;\n      &lt;transactionManager type=&quot;JDBC&quot;/&gt;\n      &lt;dataSource type=&quot;POOLED&quot;&gt;\n        &lt;property name=&quot;driver&quot; value=&quot;${driver}&quot;/&gt;\n        &lt;property name=&quot;url&quot; value=&quot;${url}&quot;/&gt;\n        &lt;property name=&quot;username&quot; value=&quot;${username}&quot;/&gt;\n        &lt;property name=&quot;password&quot; value=&quot;${password}&quot;/&gt;\n      &lt;/dataSource&gt;\n    &lt;/environment&gt;\n  &lt;/environments&gt;\n  &lt;mappers&gt;\n    &lt;mapper resource=&quot;org/mybatis/example/BlogMapper.xml&quot;/&gt;\n  &lt;/mappers&gt;\n&lt;/configuration&gt;\n\nXML配置文件的元素还有很多，上面这个配置只是指出了最重要的一部分。注意XML的header，是用来验证xml文件的。environment元素包含了一个事务管理器和一个连接池。mappers元素包含了很多mapper，mapper可以是xml配置或者只Java 的interface，他们都包含了SQL代码和mapper的定义。\n\n不使用XML构建SqlSessionFactory\n\n如果你不想使用XML配置或者想自己创建配置构造器，可以直接使用Java来构建配置。MyBatis提供了一个Configuration类可以提供所有XML配置文件所能提供的配置。\nJava\nDataSource dataSource = BlogDataSourceFactory.getBlogDataSource();\nTransactionFactory transactionFactory = new JdbcTransactionFactory();\nEnvironment environment = new Environment(&quot;development&quot;, transactionFactory, dataSource);\nConfiguration configuration = new Configuration(environment);\nconfiguration.addMapper(BlogMapper.class);\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);\n\n注意在这个配置中添加了一个mapper类。mapper类包含了一个SQL映射的注解，这样可以避免使用XML配置mapper。但是由于Java注解的限制和一些MyBatis复杂的mapper配置，XML mapper仍然是一些复杂的高级映射的首选（例如，inner join)。因此MyBatis会自动寻找并加载每一个XML配置（在这个例子中BlogMapper.xml将会被从类路径中加载)。更多的稍后介绍。\n\n从SqlSessionFactory获取SqlSession\n\n 现在你已经有了SqlSessionFactory了，根据名字的提示，可以从它得到一个SqlSession实例。SqlSession包含了所有执行数据库操作的SQL方法。你可以直接通过SqlSession执行映射的SQL。例如：\nJava\nSqlSession session = sqlSessionFactory.openSession();\ntry {\n  Blog blog = session.selectOne(&quot;org.mybatis.example.BlogMapper.selectBlog&quot;, 101);\n} finally {\n  session.close();\n}\n\n虽然这种方式对于之前的MyBatis的用户来说很熟悉，但是现在有一种跟清晰的方式。使用接口（例如：BlogMapper.class），该接口的方法定义了参数和返回值，这样就可以使用更加清晰的，类型安全的代码，而不再需要容易发生错误的并且去要强制类型转换的代码。例如：\nJava\nSqlSession session = sqlSessionFactory.openSession();\ntry {\n  BlogMapper mapper = session.getMapper(BlogMapper.class);\n  Blog blog = mapper.selectBlog(101);\n} finally {\n  session.close();\n}\n\n现在让我们来看一下到底执行了些什么。\n\n探索映射的SQL语句\n\n现在你可能在想SqlSession和Mapper类到底执行了什么。映射SQL语句这个主题比较大，这个主题差不多占据了此文档的一大部分。但是下面这些语句会展示这些示例到底执行了些什么。\n无论是上面还是下面这些例子，这些语句都可以被定义在XML或者注解上。让我们先使用XML类配置。通过XML映射实现的MyBatis全套功能使得MyBatis流行了很多年。如果你以前用过MyBatis，这些概念你可能很熟悉，但是也有为数众多的对XML映射文档的改进。下面是一个可以满足上面的SqlSesion调用的XML配置的映射语句。\nxml\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE mapper\n  PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;\n  &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;\n&lt;mapper namespace=&quot;org.mybatis.example.BlogMapper&quot;&gt;\n  &lt;select id=&quot;selectBlog&quot; resultType=&quot;Blog&quot;&gt;\n    select * from Blog where id = #{id}\n  &lt;/select&gt;\n&lt;/mapper&gt;\n\n虽然这个例子对于这个简单的项目看起来很重量级，实际上他是很轻量级的。你可以在一个XML的映射文件中定义许多的映射语句，因此你可以减少很多的XML的header和doctype声明。文件余下的部分完全可以自解释。在命名空间org.mybatis.example.BlogMapper中定义了一个名为selectBlog的映射语句。他可以让你像例子中那样通过全限定名org.mybatis.example.BlogMapper.selectBlog调用他。\nJava\nBlog blog = session.selectOne(&quot;org.mybatis.example.BlogMapper.selectBlog&quot;, 101);\n\n注意他和调用的Java函数很相似，这么做是有原因的。这个名字可以直接映射具有相同名字的命名空间，函数名，参数，返回值都可以和select语句匹配。这样就可以通过简单的调用Mapper接口的函数来使用映射的SQL语句了。\nJava\nBlogMapper mapper = session.getMapper(BlogMapper.class);\nBlog blog = mapper.selectBlog(101);\n\n第二个例子有很多优势，首先他并不依赖于字符串字面量，这样他更加的安全。其次，IDE都有代码补全，当导航到映射一句的时候可以利用这个。\n\nnamespace 的注意事项MyBatis之前的版本Namespace是可选的，这样既没用又困惑。现在namespace是必须的，通过一个很长的，全限定名的语句来区分不同的语句。正如所见，namespace绑定了接口，即使你现在不使用他们，也要遵守这个规则，以防哪天改变想法。从长远来看，使用Namespace将他放在一个Java的package名中可以使代码更清晰，提高可用性。\n名字解析：为了减少输入，对于所有的命名配置，包括语句，result map， cache，使用下列名字解析规则：\n 全限定名（例如：com.mypackage.MyMapper.selectAllThings）直接查找，找到后直接使用。\n 短名字（例如：selectAllThings）可以使用任何明确的条目。然而如果匹配了多了个（例如：com.foo.selectAllThings and com.bar.selectAllThing），那么将会报名字模糊的错误，这个时候必须使用全限定名。\n\n对于BlogMapper还有一个小诀窍。他们的映射语句完全不需要XML配置文件，可以使用注解来代替。例如下面这个例子就可以代替XML配置：\nJava\npackage org.mybatis.example;\npublic interface BlogMapper {\n  @Select(&quot;SELECT * FROM blog WHERE id = #{id}&quot;)\n  Blog selectBlog(int id);\n}\n\n注解相对来说更加的简洁，但是由于注解自身的限制和一些复杂语句的复杂性，如果使用复杂的SQL语句最好还是使用XML配置。\n这个完全取决于你和你的团队和定义映射语句的一致性类决定使用哪个方式。也就是说你不需要仅仅选择一个。从注解到XML的迁移是很方便的，反之亦然。\n\n作用域和生命周期\n\n明白我们现在所讨论的类的作用域和生命周期是很重要的。错误的使用会导致并发错误。\n\n对象生命周期和依赖注入框架  依赖注入框架可以创建线程安全的，带事务管理的SqlSession和mapper并且将它们注入到需要的Bean中，因此你可以直接忽略他的生命周期。如果要熟悉MyBatis和DI 框架的关系可以看一下MyBatis-Spring 和MyBatis-Guice两个项目\n\nSqlSessionFactoryBuilder\n\n这个类被初始化，使用完之后可以直接丢弃了。当你创建完SqlSessionFactory之后就没必要留着他了。因此SqlSessionFactoryBuilder最好的作用域是在方法作用域中（例如一个本地变量）。可以重用SqlSessionFactoryBuilder来创建多个SqlSessionFactory实例，但是最好还是不要保留它，保证所有的XML都被解析用来做更重要的事情。\n\nSqlSessionFactory\n\n当SqlSesslionFactory创建了之后，就应该一直存在你的应用中。一般来说是没有理由重新创建或处理他的。在程序运行的时候最好不要多次重新构建SqlSessionFactory。如果这样做就会有坏代码的味道了。因此SqlSessionFactory的作用域最好是应用作用域。实现的方法有很多，最好的方法就是使用单例模式或者是静态单例模式。\n\nSqlSession\n\n每个线程都应该有自己的SqlSession。SqlSession的示例不能分享且非线程安全。因此最好的作用域是请求作用域和方法作用域。永远不要在静态域或者类实例中引用SqlSession。永远不要将SqlSession放到managed 作用域中，例如Servlet框架的HttpSession。如果使用的是web框架，可以将其放到HTTP 请求的作用域中。换句话说就是，接收到HTTP请求的时候可以打开SqlSesslion连接，响应的时候关闭。关闭SqlSession非常的重要，永远记得将其放在finally块中来关闭他。下面这个例子就是确保在finally中关闭SqlSesslion\nJava\nSqlSession session = sqlSessionFactory.openSession();\ntry {\n  // do work\n} finally {\n  session.close();\n}\n\n使用这个模式可以保证你的代码关闭了数据库的连接。\n\nMapper Instances\n\nMappers是你创建用来绑定映射语句的接口。每一个mapper实例都从SqlSession中获取。因此mapper的作用域和获取他们的SqlSession的作用域是一样的。然而mapper最好的租用与是方法作用域。他们应该在一个方法使用时创建，方法结束时丢弃。他们不需要显示的关闭。和SqlSession相同，将它们放到请求作用域中也是没问题的，但是在这个层次上处理如此多的资源会很棘手。所以就简单一点，把mapper实例放到方法作用域中，下面这个例子解释了如何使用他\nJava\nSqlSession session = sqlSessionFactory.openSession();\ntry {\n  BlogMapper mapper = session.getMapper(BlogMapper.class);\n  // do work\n} finally {\n  session.close();\n}\n","readingtime":9,"url":"/cates/backend/post/2017-03-21/mybatis-started","dirs":["mybatis"],"relatives":[{"url":"/cates/backend/post/2017-06-28/mybaits-configuration","title":"MyBatis 配置"}]},{"title":"MyBatis 配置","cover":"http://p6jqy6mfr.bkt.clouddn.com/stock-photo-248219739.jpg","iso8601Date":"2017-06-28T22:13:32+08:00","basename":"mybaits-configuration","tags":["Java","Mybatis","Translate","Backend"],"date":"2017-06-28","cate":"backend","summary":"原文链接\n\nMyBatis的配置包含了设置和属性，他们对MyBatis的行为有很大的影响。MyBatis的配置文件层次结构如下：\n configuration\n     properties\n     settings\n     typeAliases\n     typeHandlers\n     objectFactory\n     plugins\n     environments\n         environment\n             transactionManager\n             dataSource\n     databaseIdProvider\n    * mappers\n\nproperties\n\n可以通过一个典型的Java Properties 类实例配置可替换的外部属性，也可以通过子元素传递这些配置属性，例如\nxml\n&lt;properties resource=&quot;org/mybatis/example/config.properties&quot;&gt;\n  &lt;property name=&quot;username&quot; value=&quot;dev_user&quot;/&gt;\n  &lt;property name=&quot;password&quot; value=&quot;F2Fa3!33TYyg&quot;/&gt;\n&lt;/properties&gt;\n\n然后这些配置属性就可以应用于配置文件中需要动态配置的其他属性。例如：\nxml\n&lt;dataSource type=&quot;POOLED&quot;&gt;\n  &lt;property name=&quot;driver&quot; value=&quot;${driver}&quot;/&gt;\n  &lt;property name=&quot;url&quot; value=&quot;${url}&quot;/&gt;\n  &lt;property name=&quot;username&quot; value=&quot;${username}&quot;/&gt;\n  &lt;property name=&quot;password&quot; value=&quot;${password}&quot;/&gt;\n&lt;/dataSource&gt;\n\n在这个例子中的username和password将会被properties的配置属性替换。driver和url属性会被config.properties的配置替换。这个为配置提供了很多的选项。  Properties同样可以直传入SqlSessionFactoryBuild.build() 方法中，例如：\n`Java\nSqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, props);\n\n// ... or ...\n\nSqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment, props);\n`\n如果同一个属性同时配置到不同的位置，MyBatis按照如下的顺序加载它们：  1. 在Properties内的子元素首先被加载。   2. 其次从resource classpath和url中加载属性并覆盖已存在的属性。  3. 作为方法参数的属性最后被加载，并且覆盖前面两次相同的属性。\n\n因此，优先级最高的是直接作为参数传入方法，其次是从resource classpath或者url加载的配置文件，最后是Properties中的子元素定义的属性。  MyBatis 3.4.2 之后可以如下使用默认占位符。\nxml\n&lt;dataSource type=&quot;POOLED&quot;&gt;\n  &lt;!-- ... --&gt;\n  &lt;property name=&quot;username&quot; value=&quot;${username:ut_user}&quot;/&gt; &lt;!-- If &#39;username&#39; property not present, username become &#39;ut_user&#39; --&gt;\n&lt;/dataSource&gt;\n\n这个功能默认是无效的，如果要开启这个功能，需要在配置属性中如下开启：\nxml\n&lt;properties resource=&quot;org/mybatis/example/config.properties&quot;&gt;\n  &lt;!-- ... --&gt;\n  &lt;property name=&quot;org.apache.ibatis.parsing.PropertyParser.enable-default-value&quot; value=&quot;true&quot;/&gt; &lt;!-- Enable this feature --&gt;\n&lt;/properties&gt;\n\n注意：如果已经使用了“：”作为属性的键例如：db:username，或者是在sql的定义中使用了OGNL的三元符，例如：${tableName != null ? tableName : &#39;global_constants&#39;}那么就需要修改默认的分隔符，如下：\nxml\n&lt;properties resource=&quot;org/mybatis/example/config.properties&quot;&gt;\n  &lt;!-- ... --&gt;\n  &lt;property name=&quot;org.apache.ibatis.parsing.PropertyParser.default-value-separator&quot; value=&quot;?:&quot;/&gt; &lt;!-- Change default value of separator --&gt;\n&lt;/properties&gt;\n\nxml\n&lt;dataSource type=&quot;POOLED&quot;&gt;\n  &lt;!-- ... --&gt;\n  &lt;property name=&quot;username&quot; value=&quot;${db:username?:ut_user}&quot;/&gt;\n&lt;/dataSource&gt;\n","readingtime":4,"url":"/cates/backend/post/2017-06-28/mybaits-configuration","dirs":["mybatis"],"relatives":[{"url":"/cates/backend/post/2017-03-21/mybatis-started","title":"mybatis 入门"}]}],"tag":"Mybatis"}}