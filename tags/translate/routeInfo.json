{"path":"tags/translate","templateID":3,"sharedPropsHashes":{},"localProps":{"posts":[{"title":"Jackson 简明教程","tags":["JSON","Java","Jackson","Translate","backend"],"iso8601Date":"2018-03-31T08:39:10+08:00","basename":"jackson-tutorial","body":"\n\n[原文地址](https://github.com/FasterXML/jackson-databind/)  \n\n#### 一分钟教程：POJOs和JSON的互相转换\n\n最常用的功能就是将一段JSON片段组装成POJOs。所以我们首先从这个入手。下面是一个简单的，有两个属性的POJO：  \n\n```Java\n// Note: can use getters/setters as well; here we just use public fields directly:\npublic class MyValue {\n  public String name;\n  public int age;\n  // NOTE: if using getters/setters, can keep fields `protected` or `private`\n}\n```\n\n我们需要一个`com.fasterxml.jackson.databind.ObjectMapper`的实例来做所有的数据绑定，`ObjectMapper`仅需要创建一次即可。  \n\n```Java\nObjectMapper mapper = new ObjectMapper(); // create once, reuse\n```\n采用默认构造函数目前基本够用，当需要处理特殊情况的时候再学习如何根据情况配置ObjectMapper。以下是使用`ObjectMapper`的示例：  \n\n```Java\nMyValue value = mapper.readValue(new File(\"data.json\"), MyValue.class);\n// or:\nvalue = mapper.readValue(new URL(\"http://some.com/api/entry.json\"), MyValue.class);\n// or:\nvalue = mapper.readValue(\"{\\\"name\\\":\\\"Bob\\\", \\\"age\\\":13}\", MyValue.class);\n```\n如果想要生成JSON，只需要反过来就行：\n\n```Java\nmapper.writeValue(new File(\"result.json\"), myResultObject);\n// or:\nbyte[] jsonBytes = mapper.writeValueAsBytes(myResultObject);\n// or:\nString jsonString = mapper.writeValueAsString(myResultObject);\n```\n#### 三分钟教程：泛型集合和树模型\n除了处理Bean风格的POJO，Jackson同时可以处理JDK的`List`和`Map`:  \n```Java\nMap<String, Integer> scoreByName = mapper.readValue(jsonSource, Map.class);\nList<String> names = mapper.readValue(jsonSource, List.class);\n\n// and can obviously write out as well\nmapper.writeValue(new File(\"names.json\"), names);\n```\n匹配这种，只要JSON的结构匹配，并且类型简单就可以。如果有POJO值，则需要声明他的实际类型(PS:POJO的属性如果是`List`等类型，则不需要指定类型)  \n\n```Java\nMap<String, ResultValue> results = mapper.readValue(jsonSource,\n   new TypeReference<Map<String, ResultValue>>() { } );\n// why extra work? Java Type Erasure will prevent type detection otherwise })\n```\n然而，处理`Map`,`List`和其他'简单'类型(String,Number,Boolean)可以更见简单，对象遍历非常麻烦，所以Jackson的`Tree Model`迟早有用。  \n\n```Java\n// can be read as generic JsonNode, if it can be Object or Array; or,\n// if known to be Object, as ObjectNode, if array, ArrayNode etc:\nObjectNode root = mapper.readTree(\"stuff.json\");\nString name = root.get(\"name\").asText();\nint age = root.get(\"age\").asInt();\n\n// can modify as well: this adds child Object as property 'other', set property 'type'\nroot.with(\"other\").put(\"type\", \"student\");\nString json = mapper.writeValueAsString(root);\n\n// with above, we end up with something like as 'json' String:\n// {\n//   \"name\" : \"Bob\", \"age\" : 13,\n//   \"other\" : {\n//      \"type\" : \"student\"\n//   }\n// }\n```\n树模型比data-bind更加的方便，尤其是高度动态的数据结构，或者JSON无法完美映射Java类的时候。\n#### 五分钟教程：Streaming parser, generator\n有一种更见标准的处理模型，叫做incremental model，也叫Stream model ，这种处理方法和data-bind方式同样方便，和Tree Model同样灵活。data-bind和Tree Model 底层都是基于它。但是同样也暴露给那些想要极致性能和完全掌控解析JSON的用户。\n\n```Java\nJsonFactory f = mapper.getFactory(); // may alternatively construct directly too\n\n// First: write simple JSON output\nFile jsonFile = new File(\"test.json\");\nJsonGenerator g = f.createGenerator(jsonFile);\n// write JSON: { \"message\" : \"Hello world!\" }\ng.writeStartObject();\ng.writeStringField(\"message\", \"Hello world!\");\ng.writeEndObject();\ng.close();\n\n// Second: read file back\nJsonParser p = f.createParser(jsonFile);\n\nJsonToken t = p.nextToken(); // Should be JsonToken.START_OBJECT\nt = p.nextToken(); // JsonToken.FIELD_NAME\nif ((t != JsonToken.FIELD_NAME) || !\"message\".equals(p.getCurrentName())) {\n   // handle error\n}\nt = p.nextToken();\nif (t != JsonToken.VALUE_STRING) {\n   // similarly\n}\nString msg = p.getText();\nSystem.out.printf(\"My message to you is: %s!\\n\", msg);\np.close(); }\n```\n#### 10分钟教程：配置\n有两种入门的配置方法：feature 和 Annotation\n##### feature 配置\n下面是一些最常用的配置\n首先从高层的data-bind配置开始：\n\n```Java\n// SerializationFeature for changing how JSON is written\n\n// to enable standard indentation (\"pretty-printing\"):\nmapper.enable(SerializationFeature.INDENT_OUTPUT);\n// to allow serialization of \"empty\" POJOs (no properties to serialize)\n// (without this setting, an exception is thrown in those cases)\nmapper.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);\n// to write java.util.Date, Calendar as number (timestamp):\nmapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n\n// DeserializationFeature for changing how JSON is read as POJOs:\n\n// to prevent exception when encountering unknown property:\nmapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n// to allow coercion of JSON empty String (\"\") to null Object value:\nmapper.enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);\n```\n下面是一些可以控制JSON底层解析，生成的配置：\n\n```Java\n// JsonParser.Feature for configuring parsing settings:\n\n// to allow C/C++ style comments in JSON (non-standard, disabled by default)\n// (note: with Jackson 2.5, there is also `mapper.enable(feature)` / `mapper.disable(feature)`)\nmapper.configure(JsonParser.Feature.ALLOW_COMMENTS, true);\n// to allow (non-standard) unquoted field names in JSON:\nmapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);\n// to allow use of apostrophes (single quotes), non standard\nmapper.configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true);\n\n// JsonGenerator.Feature for configuring low-level JSON generation:\n\n// to force escaping of non-ASCII characters:\nmapper.configure(JsonGenerator.Feature.ESCAPE_NON_ASCII, true);\n```\n##### 注解配置：修改属性名\n最简单的使用注解配置的方式是使用`@JsonProperty`:  \n\n```Java\npublic class MyBean {\n   private String _name;\n\n   // without annotation, we'd get \"theName\", but we want \"name\":\n   @JsonProperty(\"name\")\n   public String getTheName() { return _name; }\n\n   // note: it is enough to add annotation on just getter OR setter;\n   // so we can omit it here\n   public void setTheName(String n) { _name = n; }\n} \n```\n##### 注解配置：忽略属性\n有两个可以设置忽略属性的注解，一个是`@JsonIgnore` 修饰的是单个属性，一个是`@JsonIgnoreProperties` 修饰的类。\n\n```Java\n// means that if we see \"foo\" or \"bar\" in JSON, they will be quietly skipped\n// regardless of whether POJO has such properties\n@JsonIgnoreProperties({ \"foo\", \"bar\" })\npublic class MyBean\n{\n   // will not be written as JSON; nor assigned from JSON:\n   @JsonIgnore\n   public String internal;\n\n   // no annotation, public field is read/written normally\n   public String external;\n\n   @JsonIgnore\n   public void setCode(int c) { _code = c; }\n\n   // note: will also be ignored because setter has annotation!\n   public int getCode() { return _code; }\n} \n```\n由于重命名，所以注解是在匹配的的字段，get，set中共享的：如果其中一个设置了`@JsonIgnore`，其他的也受影响。当然也可以使用分离的注解来解决问题：\n\n```Java\npublic class ReadButDontWriteProps {\n   private String _name;\n   @JsonProperty public void setName(String n) { _name = n; }\n   @JsonIgnore public String getName() { return _name; }\n} \n```\n在这个例子中，`name`不会被写入到JSON中，但是如果JSON中有，则会映射到Java对象中。\n\n##### 注解配置：定制注解构造器\n和其他的data-bind包不同，jackson 不需要定义默认的构造函数（即不包含参数的构造函数）。如果需要，可以定义一个简单的包含参数的构造函数:  \n\n```Java\npublic class CtorBean\n{\n  public final String name;\n  public final int age;\n\n  @JsonCreator // constructor can be public, private, whatever\n  private CtorBean(@JsonProperty(\"name\") String name,\n    @JsonProperty(\"age\") int age)\n  {\n      this.name = name;\n      this.age = age;\n  }\n}\n```\n构造函数在不可变对象中非常实用。  \n也可以直接定义一个工厂方法：\n\n```Java\npublic class FactoryBean\n{\n    // fields etc omitted for brewity\n\n    @JsonCreator\n    public static FactoryBean create(@JsonProperty(\"name\") String name) {\n      // construct and return an instance\n    }\n}\n```\n#### 其他特性：\n一个有用，但是不被广泛知晓的功能就是Jackson可以任意转换两个POJO。可以将其想象成两步，第一步，将POJO写成JSON，第二步讲JSON写成另一个POJO。实现的时候用了更加高效的一种方法，并没有生成中间的JSON。\n转换在兼容的类型中运行的很好：\n\n```Java\nResultType result = mapper.convertValue(sourceObject, ResultType.class);\n```\n只要这两个POJO的类型兼容，即to json 和 from json的成功，那么就可以成功：\n\n```Java\n// Convert from List<Integer> to int[]\nList<Integer> sourceList = ...;\nint[] ints = mapper.convertValue(sourceList, int[].class);\n// Convert a POJO into Map!\nMap<String,Object> propertyMap = mapper.convertValue(pojoValue, Map.class);\n// ... and back\nPojoType pojo = mapper.convertValue(propertyMap, PojoType.class);\n// decode Base64! (default byte[] representation is base64-encoded String)\nString base64 = \"TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlz\";\nbyte[] binary = mapper.convertValue(base64, byte[].class);\n```\n基本上Jackson可以替换很多Apache Commons的组件，例如Base64的编码解码，处理动态POJO等。\n","date":"2018-03-31"},{"title":"MyBatis 配置","tags":["Java","Mybatis","Translate","backend"],"iso8601Date":"2017-06-28T22:13:32+08:00","basename":"mybaits-configuration","body":"\n\n[原文链接](http://www.mybatis.org/mybatis-3/configuration.html)\n\nMyBatis的配置包含了设置和属性，他们对MyBatis的行为有很大的影响。MyBatis的配置文件层次结构如下：\n* configuration\n    * properties\n    * settings\n    * typeAliases\n    * typeHandlers\n    * objectFactory\n    * plugins\n    * environments\n        * environment\n            * transactionManager\n            * dataSource\n    * databaseIdProvider\n    * mappers\n\n### properties\n可以通过一个典型的Java Properties 类实例配置可替换的外部属性，也可以通过子元素传递这些配置属性，例如\n```xml\n<properties resource=\"org/mybatis/example/config.properties\">\n  <property name=\"username\" value=\"dev_user\"/>\n  <property name=\"password\" value=\"F2Fa3!33TYyg\"/>\n</properties>\n```\n然后这些配置属性就可以应用于配置文件中需要动态配置的其他属性。例如：\n```xml\n<dataSource type=\"POOLED\">\n  <property name=\"driver\" value=\"${driver}\"/>\n  <property name=\"url\" value=\"${url}\"/>\n  <property name=\"username\" value=\"${username}\"/>\n  <property name=\"password\" value=\"${password}\"/>\n</dataSource>\n```\n在这个例子中的username和password将会被properties的配置属性替换。driver和url属性会被config.properties的配置替换。这个为配置提供了很多的选项。    \nProperties同样可以直传入SqlSessionFactoryBuild.build() 方法中，例如：\n```Java\nSqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, props);\n\n// ... or ...\n\nSqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment, props);\n```\n如果同一个属性同时配置到不同的位置，MyBatis按照如下的顺序加载它们：    \n1. 在Properties内的子元素首先被加载。     \n2. 其次从resource classpath和url中加载属性并覆盖已存在的属性。    \n3. 作为方法参数的属性最后被加载，并且覆盖前面两次相同的属性。\n\n因此，优先级最高的是直接作为参数传入方法，其次是从resource classpath或者url加载的配置文件，最后是Properties中的子元素定义的属性。    \nMyBatis 3.4.2 之后可以如下使用默认占位符。\n```xml\n<dataSource type=\"POOLED\">\n  <!-- ... -->\n  <property name=\"username\" value=\"${username:ut_user}\"/> <!-- If 'username' property not present, username become 'ut_user' -->\n</dataSource>\n```\n这个功能默认是无效的，如果要开启这个功能，需要在配置属性中如下开启：\n```xml\n<properties resource=\"org/mybatis/example/config.properties\">\n  <!-- ... -->\n  <property name=\"org.apache.ibatis.parsing.PropertyParser.enable-default-value\" value=\"true\"/> <!-- Enable this feature -->\n</properties>\n```\n注意：如果已经使用了“：”作为属性的键例如：`db:username`，或者是在sql的定义中使用了OGNL的三元符，例如：`${tableName != null ? tableName : 'global_constants'}`那么就需要修改默认的分隔符，如下：\n```xml\n<properties resource=\"org/mybatis/example/config.properties\">\n  <!-- ... -->\n  <property name=\"org.apache.ibatis.parsing.PropertyParser.default-value-separator\" value=\"?:\"/> <!-- Change default value of separator -->\n</properties>\n```\n```xml\n<dataSource type=\"POOLED\">\n  <!-- ... -->\n  <property name=\"username\" value=\"${db:username?:ut_user}\"/>\n</dataSource>\n```\n","date":"2017-06-28"},{"title":"为Go Web App 创建一个主页面","tags":["Go","Translate","backend"],"iso8601Date":"2015-11-15T01:59:00+08:00","basename":"为Go-Web-App-创建一个主页面","body":"\n\n\n[原文地址](http://sanatgersappa.blogspot.com/2013/11/creating-master-page-for-your-go-web-app.html)\n\n 大多数web app都有一个相同的布局。这个布局可能包含一个header或者footer，甚至可能包含一个导航菜单。Go的标准库提供一个简单的方式来创建这些基本元素，通过被不同的页面重用，创建出模板页的效果。\n 这个简单的例子来解释如何实现的：\n 让我们来创建一个简单的包含两个view的web app，一个是 main 一个是about。这两个view都有相同的header和footer。\n header模板的代码如下：\n\n```html\n{ { define \"header\" }}\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>{ {.Title}}</title>\n        <link rel=\"stylesheet\" href=\"//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css\">\n        <link rel=\"stylesheet\" href=\"//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-theme.min.css\">\n        <style type=\"text/css\">\n            body {padding-bottom: 70px;}\n            .content {margin:10px;}\n        </style>\n    </head>\n    <body>\n        <nav class=\"navbar navbar-default\" role=\"navigation\">\n          <div class=\"navbar-header\">\n            <a class=\"navbar-brand\" href=\"/\">Go App</a>\n          </div>\n          <div class=\"collapse navbar-collapse navbar-ex1-collapse\">  \n            <ul class=\"nav navbar-nav\">\n                <li><a href=\"/\">Main</a></li>\n                <li><a href=\"/about\">About</a></li>\n            </ul>\n          </div>\n        </nav>\n{ { end }}\n```\n\n footer模板的代码如下：\n\n\n```html\n{ { define \"footer\" }}\n        <p class=\"navbar-text navbar-fixed-bottom\">Go Rocks!</p>    \n        <script src=\"//netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js\"></script>\n    </body>\n</html>\n{ { end }}\n\n```\n\n main 模板的代码如下：\n\n```html\n{ {define \"main\"}}\n{ { template \"header\" .}}\n<div class=\"content\">\n    <h2>Main</h2>\n    <div>This is the Main page</div>\n</div>\n{ {template \"footer\" .}}\n{ { end}}\n```\n\n about 模板的代码如下：\n\n```html\n{ {define \"about\"}}\n{ { template \"header\" .}}\n<div class=\"content\">\n    <h2>About</h2>\n    <div>This is the About page</div>\n</div>\n{ {template \"footer\" .}}\n{ { end}}\n```\n\n 服务器代码如下：\n\n```Go\npackage main\n\nimport (\n    \"html/template\"\n    \"net/http\"\n)\n\n//Compile templates on start\nvar templates = template.Must(template.ParseFiles(\"header.html\", \"footer.html\", \"main.html\", \"about.html\"))\n\n//A Page structure\ntype Page struct {\n    Title string\n}\n\n//Display the named template\nfunc display(w http.ResponseWriter, tmpl string, data interface{}) {\n    templates.ExecuteTemplate(w, tmpl, data)\n}\n\n//The handlers.\nfunc mainHandler(w http.ResponseWriter, r *http.Request) {\n    display(w, \"main\", &Page{Title: \"Home\"})\n}\n\nfunc aboutHandler(w http.ResponseWriter, r *http.Request) {\n    display(w, \"about\", &Page{Title: \"About\"})\n}\n\nfunc main() {\n    http.HandleFunc(\"/\", mainHandler)\n    http.HandleFunc(\"/about\", aboutHandler)\n\n    //Listen on port 8080\n    http.ListenAndServe(\":8080\", nil)\n}\n```\n\n 每一个模板页都有一个 `{ { define \"name\" }}`的命令来定义模板的名字。main和about页面通过`{ { template \"name\" }}`来包含header和footer。`.` 出入上下文来命名模板。现在，不管main和about页面如何执行，他们的页面都会包含header和footer。\n 两个页面的结果如下：\n\n![main](https://raw.githubusercontent.com/mashuai/hexo-blog/master/goweb/main.png)  \n![about](https://raw.githubusercontent.com/mashuai/hexo-blog/master/goweb/about.png)  \n","date":"2015-11-15"},{"title":"OKHttp 拦截器","tags":["Translate","Java","OKHttp","HTTP","backend"],"iso8601Date":"2017-03-19T23:47:42+08:00","basename":"interceptors","body":"\n\n[原文地址](https://github.com/square/okhttp/wiki/Interceptors)\n拦截器是一种监控，重写，重试请求的强大机制。下面这个例子是一个记录出发出请求和接受响应的简单的拦截器的例子。\n```Java\nclass LoggingInterceptor implements Interceptor {\n  @Override public Response intercept(Interceptor.Chain chain) throws IOException {\n    Request request = chain.request();\n\n    long t1 = System.nanoTime();\n    logger.info(String.format(\"Sending request %s on %s%n%s\",\n        request.url(), chain.connection(), request.headers()));\n\n    Response response = chain.proceed(request);\n\n    long t2 = System.nanoTime();\n    logger.info(String.format(\"Received response for %s in %.1fms%n%s\",\n        response.request().url(), (t2 - t1) / 1e6d, response.headers()));\n\n    return response;\n  }\n}\n```\n调用`chain.proceed(request)`是每个拦截器最重要的实现。这个看起来简单的方法是所有HTTP工作的地方，也是对请求响应的地方。\n拦截器可以链式调用。假设你有一个压缩的拦截器和一个校验和的拦截器：你要先确定是先压缩再校验，还是先校验再压缩。OKHTTP使用列表跟踪拦截器，而且拦截器是顺序取消的。\n![Interceptors](https://raw.githubusercontent.com/wiki/square/okhttp/interceptors@2x.png)\n#### 应用拦截器\n拦截器注册为应用拦截器或者网络拦截器。我们将使用上面定义的`LoggingInterceptor`来展示这两者的不同。\n通过调用`OkHttpClient.Builder`的`addInterceptor()`来注册一个应用拦截器。\n```Java\nOkHttpClient client = new OkHttpClient.Builder()\n    .addInterceptor(new LoggingInterceptor())\n    .build();\n\nRequest request = new Request.Builder()\n    .url(\"http://www.publicobject.com/helloworld.txt\")\n    .header(\"User-Agent\", \"OkHttp Example\")\n    .build();\n\nResponse response = client.newCall(request).execute();\nresponse.body().close();\n```\n链接`http://www.publicobject.com/helloworld.txt`重定向到链接`http://www.publicobject.com/helloworld.txt`,OKHttp回自动重定向。应用拦截器只会被调用一次。`chain.proceed()`返回的响应是重定向之后的响应。\n```bash\nINFO: Sending request http://www.publicobject.com/helloworld.txt on null\nUser-Agent: OkHttp Example\n\nINFO: Received response for https://publicobject.com/helloworld.txt in 1179.7ms\nServer: nginx/1.4.6 (Ubuntu)\nContent-Type: text/plain\nContent-Length: 1759\nConnection: keep-alive\n```\n因为`response.request().url()`和`request.url()`获取的URL不同，所以可以得出上述结论。两行日志记录了两个不同的URL。\n#### 网络拦截器\n注册网络拦截器和应用拦截器差不多，只是用`addNetworkInterceptor()`代替了`addInterceptor()`。\n```Java\nOkHttpClient client = new OkHttpClient.Builder()\n    .addNetworkInterceptor(new LoggingInterceptor())\n    .build();\n\nRequest request = new Request.Builder()\n    .url(\"http://www.publicobject.com/helloworld.txt\")\n    .header(\"User-Agent\", \"OkHttp Example\")\n    .build();\n\nResponse response = client.newCall(request).execute();\nresponse.body().close();\n```\n当运行这段代码的时候拦截器运行了两次，一次初始的地址`http://www.publicobject.com/helloworld.txt`，一次是重定向的地址`https://publicobject.com/helloworld.txt`。\n```bash\nINFO: Sending request http://www.publicobject.com/helloworld.txt on Connection{www.publicobject.com:80, proxy=DIRECT hostAddress=54.187.32.157 cipherSuite=none protocol=http/1.1}\nUser-Agent: OkHttp Example\nHost: www.publicobject.com\nConnection: Keep-Alive\nAccept-Encoding: gzip\n\nINFO: Received response for http://www.publicobject.com/helloworld.txt in 115.6ms\nServer: nginx/1.4.6 (Ubuntu)\nContent-Type: text/html\nContent-Length: 193\nConnection: keep-alive\nLocation: https://publicobject.com/helloworld.txt\n\nINFO: Sending request https://publicobject.com/helloworld.txt on Connection{publicobject.com:443, proxy=DIRECT hostAddress=54.187.32.157 cipherSuite=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA protocol=http/1.1}\nUser-Agent: OkHttp Example\nHost: publicobject.com\nConnection: Keep-Alive\nAccept-Encoding: gzip\n\nINFO: Received response for https://publicobject.com/helloworld.txt in 80.9ms\nServer: nginx/1.4.6 (Ubuntu)\nContent-Type: text/plain\nContent-Length: 1759\nConnection: keep-alive\n```\n网络请求同时也包含了更多的数据，例如:由OKHttp添加的用来支持响应压缩的`Accept-Encoding: gzip`header。网络拦截器的`chain`有一个非空的`Connection`，用来查询连接服务器的IP地址和TLS配置信息。\n#### 如何选择拦截器\n每种拦截器都有优点。\n##### 应用拦截器\n * 无需关心像重试，重定向等这样的中间过程。\n * 即使是从缓存响应，也会调用一次。\n * 只关心应用最初的目的，并不需要关心OKHttp注入的header，例如`If-None-Match`\n * 允许短路，不执行`Chain.proceed()`\n * 允许重试，执行多次`Chain.proceed()`\n##### 网络拦截器\n * 可以操作想重试，重定向这样的中间过程。\n * 短路网络连接的从cache返回响应的时候不执行。\n * 可以监控呗发送到网络上的数据\n * 访问包含request的`Connection`\n#### 重写请求\n拦截器可以添加，删除，替换请求头。如果请求有请求体，拦截器也可以转换请求体。例如：如果远程连接的服务器支持压缩，可以使用应用拦截器添加压缩请求体的拦截器。\n```Java\n/** This interceptor compresses the HTTP request body. Many webservers can't handle this! */\nfinal class GzipRequestInterceptor implements Interceptor {\n  @Override public Response intercept(Interceptor.Chain chain) throws IOException {\n    Request originalRequest = chain.request();\n    if (originalRequest.body() == null || originalRequest.header(\"Content-Encoding\") != null) {\n      return chain.proceed(originalRequest);\n    }\n\n    Request compressedRequest = originalRequest.newBuilder()\n        .header(\"Content-Encoding\", \"gzip\")\n        .method(originalRequest.method(), gzip(originalRequest.body()))\n        .build();\n    return chain.proceed(compressedRequest);\n  }\n\n  private RequestBody gzip(final RequestBody body) {\n    return new RequestBody() {\n      @Override public MediaType contentType() {\n        return body.contentType();\n      }\n\n      @Override public long contentLength() {\n        return -1; // We don't know the compressed length in advance!\n      }\n\n      @Override public void writeTo(BufferedSink sink) throws IOException {\n        BufferedSink gzipSink = Okio.buffer(new GzipSink(sink));\n        body.writeTo(gzipSink);\n        gzipSink.close();\n      }\n    };\n  }\n}\n```\n#### 重写响应\n同样拦截器也可以重写响应，转化请求体。通常这样做比重写请求头更危险，因为这样做可能返回的并不是服务器预期值。\n如果你处在一个比较棘手的场景，并且准备处理后果，重写响应头就是一个很好的方式处理这类问题。例如：可以修复服务器未配置的`Cache-Control`来获取更好的缓存响应配置。\n```Java\n/** Dangerous interceptor that rewrites the server's cache-control header. */\nprivate static final Interceptor REWRITE_CACHE_CONTROL_INTERCEPTOR = new Interceptor() {\n  @Override public Response intercept(Interceptor.Chain chain) throws IOException {\n    Response originalResponse = chain.proceed(chain.request());\n    return originalResponse.newBuilder()\n        .header(\"Cache-Control\", \"max-age=60\")\n        .build();\n  }\n};\n```\n通常为了补充服务器相应的修复，这个方法是最好的。\n#### 那些可以使用拦截器\n使用拦截器要求OKHttp 2.0即以上。不行的是拦截器不可以和`OkUrlFactory`，或者依赖于他的库同时使用，包括[Retrofit](http://square.github.io/retrofit/)1.8以下，[Picasso](http://square.github.io/picasso/)2.4以下。\n","date":"2017-03-19"},{"title":"OKHttp https","tags":["Translate","Java","OKHttp","HTTP","backend"],"iso8601Date":"2017-03-23T21:32:29+08:00","basename":"https","body":"\n\n[原文链接](https://github.com/square/okhttp/wiki/HTTPS)\n\nOKHttp尝试平衡两个相互矛盾的内容：\n * 连接尽可能多的主机。包括使用[boringssl](https://boringssl.googlesource.com/boringssl/)的高级的主机和一些使用[openssl](https://www.openssl.org/)的过时的主机。\n * 连接的安全性。包括验证远程主机的证书，通过强密码进行数据交换。\n\n协商连接到HTTPS的时候，OKHttp需要知道需要提供的[TLS版本](http://square.github.io/okhttp/3.x/okhttp/okhttp3/TlsVersion.html)和[密码套件](http://square.github.io/okhttp/3.x/okhttp/okhttp3/CipherSuite.html)。如果一个客户端需要最大化链接就需要包含过时的TLS版本和弱设计的密码组合。一个严格的客户端想要最大化安全就需要只包含最新的TLS版本和强密码套件。\n安全和连接规范具体是由[ConnectionSpec](http://square.github.io/okhttp/3.x/okhttp/okhttp3/ConnectionSpec.html)实现的。OKHttp包含三个内置的规范：\n * `MODERN_TLS` 是连接现代HTTPS服务器的配置。\n * `COMPATIBLE_TLS` 是连接非现代，但安全的HTTPS服务器的配置。\n * `CLEARTEXT` 是非安全的http的配置。\n\n默认OKHttp会尝试使用`MODERN_TLS`连接，如果现代配置失败，回到使用`COMPATIBLE_TLS`配置。\nTLS版本和密码套件在任一一个发布版本的人一个规范中都可能改变。例如，在OKHttp2.2，因为[POODLE](http://googleonlinesecurity.blogspot.ca/2014/10/this-poodle-bites-exploiting-ssl-30.html)攻击就移除了SSL 3.0的支持。在OKHttp 3.0，移除了[RC4](http://en.wikipedia.org/wiki/RC4#Security)的支持。同桌面浏览器一样，使用罪行的OKHttp版本可以获得最好的安全保障。\n也可以根据一组定制的TLS 版本和密码套件构建自己的规范。例如，下面这个配置要求使用三组高强度的密码套件。它的缺点就是必须是Android5.0+或者是最新的浏览器。\n```Java\nConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)  \n    .tlsVersions(TlsVersion.TLS_1_2)\n    .cipherSuites(\n          CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,\n          CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,\n          CipherSuite.TLS_DHE_RSA_WITH_AES_128_GCM_SHA256)\n    .build();\n\nOkHttpClient client = new OkHttpClient.Builder() \n    .connectionSpecs(Collections.singletonList(spec))\n    .build();\n```\n#### 证书锁定\n默认情况下OKHttp信任主机平台的证书颁发机构。这个策略可以最大化连接，但是也有可能收到权威证书攻击，例如[2011 DigiNotar attack](http://www.computerworld.com/article/2510951/cybercrime-hacking/hackers-spied-on-300-000-iranians-using-fake-google-certificate.html)。同样也假设你的证书是权威机构颁发的。\n使用[CertificatePinner](http://square.github.io/okhttp/3.x/okhttp/okhttp3/CertificatePinner.html)限制了哪些证书和证书颁发机构值得信任。使用证书锁定可以提高安全性，但是限制了服务端团队升级他们的TLS证书。**在没的到服务端团队的许可的时候不要使用证书锁定**。\n```Java\n  public CertificatePinning() {\n    client = new OkHttpClient.Builder()\n        .certificatePinner(new CertificatePinner.Builder()\n            .add(\"publicobject.com\", \"sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=\")\n            .build())\n        .build();\n  }\n\n  public void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"https://publicobject.com/robots.txt\")\n        .build();\n\n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n    for (Certificate certificate : response.handshake().peerCertificates()) {\n      System.out.println(CertificatePinner.pin(certificate));\n    }\n  }\n```\n#### 定制信任证书\n下面所有的代码展示了如何使用你自己的配置代替服务端的证书配置。正如上述所言，**在没的到服务端团队的许可的时候不要使用定制证书*。\n```Java\n  private final OkHttpClient client;\n\n  public CustomTrust() {\n    SSLContext sslContext = sslContextForTrustedCertificates(trustedCertificatesInputStream());\n    client = new OkHttpClient.Builder()\n        .sslSocketFactory(sslContext.getSocketFactory())\n        .build();\n  }\n\n  public void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"https://publicobject.com/helloworld.txt\")\n        .build();\n\n    Response response = client.newCall(request).execute();\n    System.out.println(response.body().string());\n  }\n\n  private InputStream trustedCertificatesInputStream() {\n    ... // Full source omitted. See sample.\n  }\n\n  public SSLContext sslContextForTrustedCertificates(InputStream in) {\n    ... // Full source omitted. See sample.\n  }\n```\n","date":"2017-03-23"},{"title":"OKHttp connections","tags":["OKHttp","Translate","Java","HTTP","backend"],"iso8601Date":"2017-03-19T03:05:48+08:00","basename":"connections","body":"\n\n[原文地址](https://github.com/square/okhttp/wiki/Connections)\n虽然只提供了URL，但是OKHttp会使用URL，Address，Route三种方式来连接服务器。\n\n#### URLS\nURLs例如（https://github.com/square/okhttp) 是HTTP和Internet的基础。除了是一个表示互联网一切的命名方案，也指定了如何访问Web资源。\nURLs是抽象的：\n  * 它指出，调用可以是纯文本（http）或者加密（https），但是并没有指定一种加密算法。也没有指定如何验证各个端点的证书([HostnameVerifier](http://developer.android.com/reference/javax/net/ssl/HostnameVerifier.html))，或者是哪个证书可信([SSLSocketFactory](http://developer.android.com/reference/org/apache/http/conn/ssl/SSLSocketFactory.html))\n  * 它为指定是否需要使用代理服务器以及代理服务器如何授权。\n 它也是具体的，每个URL标识一个具体的路径（/square/okhttp)和查询（?q=sharks&lang=en)。每个服务器有很多URL。\n\n #### Addresses\n Address指定了一个服务器（例如：github.com），以及连接服务器必要的所有的静态配置，包括：端口号，HTTPS设置，优先协议（例如，HTTP／2，SPDY）。\n URL使用了相同的Address，底层也可能实用了相同的TCP链接。复用连接可以提高性能：低延迟，高吞吐（[TCP 慢启动](http://www.igvita.com/2011/10/20/faster-web-vs-tcp-slow-start/))，低电量。OKHttp使用[ConnectionPool](http://square.github.io/okhttp/3.x/okhttp/okhttp3/ConnectionPool.html)自动复用HTTP／1.x连接，多路复用HTT／2和SPDY的连接。\n 在OKHttp，address的一些字段来源于URL（协议，主机名，端口），剩下的来自[OKHttpClient](http://square.github.io/okhttp/3.x/okhttp/okhttp3/OkHttpClient.html)。\n #### Routes\n Route提供了连接服务器必要的动态信息。包括，具体的IP地址（通过DNS查询），具体使用那个代理（[ProxySelector](http://developer.android.com/reference/java/net/ProxySelector.html)），协n哪个TLS版本（HTTPS).\n 一个服务器可能有多条路有信息。例如：多台服务器部署在多个数据中心，DNS查询返回多个IP地址。\n #### Connections\n 当发起一个URL的请求的时候：\n   1. 使用URL和OKHttpCLient确定具体的**Address**。这个地址明确如何连接服务器。\n   2. 尝试从**连接池**中查找具体Address的连接。\n   3. 如果未找到有效的连接，使用Route来尝试获取。一般这样意味着通过DNS或去IP地址。然后，如果需要，选择一个TLS的版本和代理服务器。\n   4. 如果是一个新的Route，要么使用Socket直连，TLS隧道（HTTS方式），或者直接使用TLS。也会进行必要的TLS握手。\n   5. 发送请求，接受响应。\n 如果连接发生错误，OKHttp会选择另一个路由重试。这样OKHttp就可以在服务器端一些地址无法访问的时候恢复访问。同时如果连接池的连接失效或者常识的TLS 版本不支持也很有用。\n 当响应接收到了之后，连接会放回到连接池以便之后使用。连接在一段时间过期后回被移除连接池。\n\n","date":"2017-03-19"},{"title":"OKHttp的调用","tags":["Translate","Java","OKHttp","HTTP","backend"],"iso8601Date":"2017-03-18T23:10:03+08:00","basename":"calls","body":"\n\n[原文地址](https://github.com/square/okhttp/wiki/Calls)\n\nHTTP客户端的任务是接受请求和产生响应。理论很简单，但是实战的时候就有点棘手了。\n#### Requests\n每一个HTTP请求都包含一个URL，一个方法（例如，GET，POST）和一些headers。请求同时可以包含一个特定类型的数据流作为body。\n#### Responses\nResponse 通过一个一个状态码（例如，200 成功，404未找到），headers，和一个可选的Body来响应请求。\n##### 重写请求\n当使用OkHttp发送HTTP请求的时候，可以在高层次描述这个请求：通过这个URL和这些headers来获取响应。为了准确和更高的效率，OKHttp会在发送之前重现请求。\nOkHttp将会添加原请求没有的header，包括`Content-length`,`Transfer-Encoding`,`User-Agent`,`Host`,`Connection`，`Content-Type`。除非已经提供了，否则OKHttp回会添加 `Acceept-Encoding`来压缩响应。如果有Cookie，也会添加`Cookie`。\n有些请求会缓存响应。当被缓存的响应过期后，OKHttp会发送一个有条件的GET请求来获取新的响应，如果新现在的比缓存的响应更新，将会更新缓存过的响应。这要求`If-Modified-Since`和`If-None-Match`添加到headers中。\n##### 重写响应\n如果透明压缩启用了，OKHttp将会把`Content-Encoding`和`Content-Length`从headers中移除，因为他们不是用来解压缩的。\n如果条件GET请求成功，从网上下载的响应和缓存的响应根据Spec合并。\n##### 后续请求\n当请求的URL被转移了，web server 将会返回一个302的状态码来表示这个文档的新URL，OKHttp将会重定向到新的URL获取最终的响应。\n如果响应需要认证，OKHttp将会使用`Authenticator`（如果提供了一个）来认证。如果认证器提供了凭证，请求回使用凭证重试。\n##### 重试请求\n有时连接失败，例如：连接池过期断开链接，或者无法连接服务器。OKHttp会通过不同的可用路由来重试请求。\n#### calls\n通过重写，重定向，继续请求和重试，一个简单的请求可能会产生很多请求和响应。OKHttp使用`call`建立一个不管多少中间请求和响应的任务模型。总的来说这不多。但是了解代码将会继续工作，不管是URL重定向或者是转移故障其他IP。\ncall有两种工作方\n   * 同步：线程将会阻塞道到响应可读。\n   * 异步：将请求加入到其他线程的队列，当响应可读诗时，会在其他的线程获取回调。\n请求调用可以在任何线程取消。如果调用未完成，这个请求将会失败。当调用取消时，在先请求踢体或者读响应体的代码将会跑出IOException的异常。\n##### 调度\n对于同步调用，将会由自身线程控制多少并发请求。太多并发连接浪费资源，太少又回有高延迟。\n对于异步来说，Dispatcher实现了最大并发的策略。可以设置没个服务器的最大并发（默认是5）和总体的并发（默认64）。\n","date":"2017-03-18"},{"title":"mybatis 入门","tags":["Java","Mybatis","Translate","backend"],"iso8601Date":"2017-03-21T19:58:14+08:00","basename":"mybatis-started","body":"\n[原文链接](http://www.mybatis.org/mybatis-3/getting-started.html)\n#### 安装\n使用Mybatis只需要将[mybatis-x.x.x.jar](https://github.com/mybatis/mybatis-3/releases)添加到类路径即可。\n如果使用maven只需要将下列代码添加到pom.xml中。\n```xml\n<dependency>\n  <groupId>org.mybatis</groupId>\n  <artifactId>mybatis</artifactId>\n  <version>x.x.x</version>\n</dependency>\n```\n#### 根据XML配置构建SqlSessionFactory\n每一个Mybatis应用都围绕SqlSessionFactory展开。一个SqlSessionFactory实例由SqlSessionFactoryBuilder创建。SqlSessionFacotryBuilder可以通过XML的配置文件或者一个配置好的Configuration类来创建SqlSessionFactory。\n根据XML配置来构建SqlSessionFacotry非常的简单。推荐使用在类路径来配置，但是同样可以使用任何的InputStream实例，包括一个普通的文件路径或者是file:// 的URL。Mybatis有一个叫`Resource`的工具函数，可以很容易的从类路径或者其他文件路径加载资源。\n```Java\nString resource = \"org/mybatis/example/mybatis-config.xml\";\nInputStream inputStream = Resources.getResourceAsStream(resource);\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n```\nXML配置文件包含了Mybatis的核心设置，包括对应数据库连接的数据源，同样还有一个事务管理器来决定事务的范围和控制。完整的XML配置稍后会在文档中列出，下面是一个示例配置。\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n  PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n  <environments default=\"development\">\n    <environment id=\"development\">\n      <transactionManager type=\"JDBC\"/>\n      <dataSource type=\"POOLED\">\n        <property name=\"driver\" value=\"${driver}\"/>\n        <property name=\"url\" value=\"${url}\"/>\n        <property name=\"username\" value=\"${username}\"/>\n        <property name=\"password\" value=\"${password}\"/>\n      </dataSource>\n    </environment>\n  </environments>\n  <mappers>\n    <mapper resource=\"org/mybatis/example/BlogMapper.xml\"/>\n  </mappers>\n</configuration>\n```\nXML配置文件的元素还有很多，上面这个配置只是指出了最重要的一部分。注意XML的header，是用来验证xml文件的。`environment`元素包含了一个事务管理器和一个连接池。`mappers`元素包含了很多`mapper`，mapper可以是xml配置或者只Java 的interface，他们都包含了SQL代码和mapper的定义。\n#### 不使用XML构建SqlSessionFactory\n如果你不想使用XML配置或者想自己创建配置构造器，可以直接使用Java来构建配置。MyBatis提供了一个Configuration类可以提供所有XML配置文件所能提供的配置。\n```Java\nDataSource dataSource = BlogDataSourceFactory.getBlogDataSource();\nTransactionFactory transactionFactory = new JdbcTransactionFactory();\nEnvironment environment = new Environment(\"development\", transactionFactory, dataSource);\nConfiguration configuration = new Configuration(environment);\nconfiguration.addMapper(BlogMapper.class);\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);\n```\n注意在这个配置中添加了一个mapper类。mapper类包含了一个SQL映射的注解，这样可以避免使用XML配置mapper。但是由于Java注解的限制和一些MyBatis复杂的mapper配置，XML mapper仍然是一些复杂的高级映射的首选（例如，inner join)。因此MyBatis会自动寻找并加载每一个XML配置（在这个例子中BlogMapper.xml将会被从类路径中加载)。更多的稍后介绍。\n#### 从SqlSessionFactory获取SqlSession\n 现在你已经有了SqlSessionFactory了，根据名字的提示，可以从它得到一个SqlSession实例。SqlSession包含了所有执行数据库操作的SQL方法。你可以直接通过SqlSession执行映射的SQL。例如：\n```Java\nSqlSession session = sqlSessionFactory.openSession();\ntry {\n  Blog blog = session.selectOne(\"org.mybatis.example.BlogMapper.selectBlog\", 101);\n} finally {\n  session.close();\n}\n```\n虽然这种方式对于之前的MyBatis的用户来说很熟悉，但是现在有一种跟清晰的方式。使用接口（例如：BlogMapper.class），该接口的方法定义了参数和返回值，这样就可以使用更加清晰的，类型安全的代码，而不再需要容易发生错误的并且去要强制类型转换的代码。例如：\n```Java\nSqlSession session = sqlSessionFactory.openSession();\ntry {\n  BlogMapper mapper = session.getMapper(BlogMapper.class);\n  Blog blog = mapper.selectBlog(101);\n} finally {\n  session.close();\n}\n```\n现在让我们来看一下到底执行了些什么。\n#### 探索映射的SQL语句\n现在你可能在想SqlSession和Mapper类到底执行了什么。映射SQL语句这个主题比较大，这个主题差不多占据了此文档的一大部分。但是下面这些语句会展示这些示例到底执行了些什么。\n无论是上面还是下面这些例子，这些语句都可以被定义在XML或者注解上。让我们先使用XML类配置。通过XML映射实现的MyBatis全套功能使得MyBatis流行了很多年。如果你以前用过MyBatis，这些概念你可能很熟悉，但是也有为数众多的对XML映射文档的改进。下面是一个可以满足上面的SqlSesion调用的XML配置的映射语句。\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n  PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"org.mybatis.example.BlogMapper\">\n  <select id=\"selectBlog\" resultType=\"Blog\">\n    select * from Blog where id = #{id}\n  </select>\n</mapper>\n```\n虽然这个例子对于这个简单的项目看起来很重量级，实际上他是很轻量级的。你可以在一个XML的映射文件中定义许多的映射语句，因此你可以减少很多的XML的header和doctype声明。文件余下的部分完全可以自解释。在命名空间`org.mybatis.example.BlogMapper`中定义了一个名为`selectBlog`的映射语句。他可以让你像例子中那样通过全限定名`org.mybatis.example.BlogMapper.selectBlog`调用他。\n```Java\nBlog blog = session.selectOne(\"org.mybatis.example.BlogMapper.selectBlog\", 101);\n```\n注意他和调用的Java函数很相似，这么做是有原因的。这个名字可以直接映射具有相同名字的命名空间，函数名，参数，返回值都可以和select语句匹配。这样就可以通过简单的调用Mapper接口的函数来使用映射的SQL语句了。\n```Java\nBlogMapper mapper = session.getMapper(BlogMapper.class);\nBlog blog = mapper.selectBlog(101);\n```\n第二个例子有很多优势，首先他并不依赖于字符串字面量，这样他更加的安全。其次，IDE都有代码补全，当导航到映射一句的时候可以利用这个。\n> namespace 的注意事项  \n> MyBatis之前的版本**Namespace**是可选的，这样既没用又困惑。现在namespace是必须的，通过一个很长的，全限定名的语句来区分不同的语句。  \n> 正如所见，namespace绑定了接口，即使你现在不使用他们，也要遵守这个规则，以防哪天改变想法。从长远来看，使用Namespace将他放在一个Java的package名中可以使代码更清晰，提高可用性。\n> 名字解析：为了减少输入，对于所有的命名配置，包括语句，result map， cache，使用下列名字解析规则：\n> * 全限定名（例如：com.mypackage.MyMapper.selectAllThings）直接查找，找到后直接使用。\n> * 短名字（例如：selectAllThings）可以使用任何明确的条目。然而如果匹配了多了个（例如：com.foo.selectAllThings and com.bar.selectAllThing），那么将会报名字模糊的错误，这个时候必须使用全限定名。\n\n对于BlogMapper还有一个小诀窍。他们的映射语句完全不需要XML配置文件，可以使用注解来代替。例如下面这个例子就可以代替XML配置：\n```Java\npackage org.mybatis.example;\npublic interface BlogMapper {\n  @Select(\"SELECT * FROM blog WHERE id = #{id}\")\n  Blog selectBlog(int id);\n}\n```\n注解相对来说更加的简洁，但是由于注解自身的限制和一些复杂语句的复杂性，如果使用复杂的SQL语句最好还是使用XML配置。\n这个完全取决于你和你的团队和定义映射语句的一致性类决定使用哪个方式。也就是说你不需要仅仅选择一个。从注解到XML的迁移是很方便的，反之亦然。\n#### 作用域和生命周期\n明白我们现在所讨论的类的作用域和生命周期是很重要的。错误的使用会导致并发错误。\n> **对象生命周期和依赖注入框架**    \n> 依赖注入框架可以创建线程安全的，带事务管理的SqlSession和mapper并且将它们注入到需要的Bean中，因此你可以直接忽略他的生命周期。如果要熟悉MyBatis和DI 框架的关系可以看一下MyBatis-Spring 和MyBatis-Guice两个项目\n\n##### SqlSessionFactoryBuilder\n这个类被初始化，使用完之后可以直接丢弃了。当你创建完SqlSessionFactory之后就没必要留着他了。因此SqlSessionFactoryBuilder最好的作用域是在方法作用域中（例如一个本地变量）。可以重用SqlSessionFactoryBuilder来创建多个SqlSessionFactory实例，但是最好还是不要保留它，保证所有的XML都被解析用来做更重要的事情。\n##### SqlSessionFactory\n当SqlSesslionFactory创建了之后，就应该一直存在你的应用中。一般来说是没有理由重新创建或处理他的。在程序运行的时候最好不要多次重新构建SqlSessionFactory。如果这样做就会有坏代码的味道了。因此SqlSessionFactory的作用域最好是应用作用域。实现的方法有很多，最好的方法就是使用单例模式或者是静态单例模式。\n##### SqlSession\n每个线程都应该有自己的SqlSession。SqlSession的示例不能分享且非线程安全。因此最好的作用域是请求作用域和方法作用域。永远不要在静态域或者类实例中引用SqlSession。永远不要将SqlSession放到managed 作用域中，例如Servlet框架的HttpSession。如果使用的是web框架，可以将其放到HTTP 请求的作用域中。换句话说就是，接收到HTTP请求的时候可以打开SqlSesslion连接，响应的时候关闭。关闭SqlSession非常的重要，永远记得将其放在finally块中来关闭他。下面这个例子就是确保在finally中关闭SqlSesslion\n```Java\nSqlSession session = sqlSessionFactory.openSession();\ntry {\n  // do work\n} finally {\n  session.close();\n}\n```\n使用这个模式可以保证你的代码关闭了数据库的连接。\n##### Mapper Instances\nMappers是你创建用来绑定映射语句的接口。每一个mapper实例都从SqlSession中获取。因此mapper的作用域和获取他们的SqlSession的作用域是一样的。然而mapper最好的租用与是方法作用域。他们应该在一个方法使用时创建，方法结束时丢弃。他们不需要显示的关闭。和SqlSession相同，将它们放到请求作用域中也是没问题的，但是在这个层次上处理如此多的资源会很棘手。所以就简单一点，把mapper实例放到方法作用域中，下面这个例子解释了如何使用他\n```Java\nSqlSession session = sqlSessionFactory.openSession();\ntry {\n  BlogMapper mapper = session.getMapper(BlogMapper.class);\n  // do work\n} finally {\n  session.close();\n}\n```\n","date":"2017-03-21"},{"title":"OKHttp Recipes","tags":["Java","Translate","OKHttp","HTTP","backend"],"iso8601Date":"2017-03-19T03:44:10+08:00","basename":"Recipes","body":"\n\n[原文地址](https://github.com/square/okhttp/wiki/Recipes)\n我们写了一些建议，来演示如何使用OKHttp来解决一些常见问题。\n\n#### 同步GET\n下载文件，打印header，打印body。\n`string()`方法对于小文档的响应来说是个既方便有高效的方法。但是如果一个文档太大（大于1M），就不要使用`string()`方法了，以为他会把整个文档加载到内存中,在这种情况下可以把body当作流来处理。  \n\n```Java\nprivate final OkHttpClient client = new OkHttpClient();\npublic void run() throws Exception {\nRequest request = new Request.Builder()\n    .url(\"http://publicobject.com/helloworld.txt\")\n    .build();\n\nResponse response = client.newCall(request).execute();\nif (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\nHeaders responseHeaders = response.headers();\nfor (int i = 0; i < responseHeaders.size(); i++) {\nSystem.out.println(responseHeaders.name(i) + \": \" + responseHeaders.value(i));\n}\nSystem.out.println(response.body().string());\n    \n```\n\n #### 异步GET\n 在工作线程下载文件，响应可读后回调。在响应的header准备好的时候回调。响应体可能仍然阻塞。现在OKHttp没有提供获取响应体的异步API。\n\n```Java\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic void run() throws Exception {\nRequest request = new Request.Builder()\n    .url(\"http://publicobject.com/helloworld.txt\")\n    .build();\n\nclient.newCall(request).enqueue(new Callback() {\n    @Override public void onFailure(Call call, IOException e) {\n    e.printStackTrace();\n    }\n\n    @Override public void onResponse(Call call, Response response) throws IOException {\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n    Headers responseHeaders = response.headers();\n    for (int i = 0, size = responseHeaders.size(); i < size; i++) {\n        System.out.println(responseHeaders.name(i) + \": \" + responseHeaders.value(i));\n    }\n\n    System.out.println(response.body().string());\n    }\n});\n}\n```\n\n #### 访问Header\n 总体上说Header有点像`Map<String,String>`，每一个字段都有或没有值。但是一些Header允许有多个值，就像Guava的`[Multimap](http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Multimap.html)`。\n 例如HTTP提供多个Vary`的值是很常见并且合法的。OKHttp的API在这两种情况下都能轻松使用。\n 当写入请求header的时候使用`header(name,value)`设置仅有一个的`name`和`value`。如果有存在的值，会先移除值再添加。 使用`addHeader(name,value)`添加header不会移除已经存在的header。\n 当读响应header的时候，`header(name)`只返回最后一个值，通常也仅有一个。如果没有值，将会返回null。以一个list的方式获取所有的值可以使用`headers(name)`。\n 如果要访问所有的header，可以使用Headers类，支持坐标访问。\n\n```Java\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic void run() throws Exception {\nRequest request = new Request.Builder()\n    .url(\"https://api.github.com/repos/square/okhttp/issues\")\n    .header(\"User-Agent\", \"OkHttp Headers.java\")\n    .addHeader(\"Accept\", \"application/json; q=0.5\")\n    .addHeader(\"Accept\", \"application/vnd.github.v3+json\")\n    .build();\n\nResponse response = client.newCall(request).execute();\nif (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\nSystem.out.println(\"Server: \" + response.header(\"Server\"));\nSystem.out.println(\"Date: \" + response.header(\"Date\"));\nSystem.out.println(\"Vary: \" + response.headers(\"Vary\"));\n}\n```\n\n #### 使用POST发送String请求。\n 使用HTTP的POST给服务发送请求。这个例子发送了一个markdown文档到服务器用来将markdown渲染成HTML。因为整个请求是放在内存中的，所以使用此API的时候避免大文档（小于1M）。\n\n```Java\npublic static final MediaType MEDIA_TYPE_MARKDOWN\n    = MediaType.parse(\"text/x-markdown; charset=utf-8\");\n\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic void run() throws Exception {\nString postBody = \"\"\n    + \"Releases\\n\"\n    + \"--------\\n\"\n    + \"\\n\"\n    + \" * _1.0_ May 6, 2013\\n\"\n    + \" * _1.1_ June 15, 2013\\n\"\n    + \" * _1.2_ August 11, 2013\\n\";\n\nRequest request = new Request.Builder()\n    .url(\"https://api.github.com/markdown/raw\")\n    .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, postBody))\n    .build();\n\nResponse response = client.newCall(request).execute();\nif (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\nSystem.out.println(response.body().string());\n}\n```\n\n #### 使用POST发送流\n 使用POST将请求体以流的方式发送。请求体在被写入的时候生成。这个例子直接使用了`[Okio](https://github.com/square/okio)`的缓冲库。可能你更熟悉`OutputStream`可以通过`BufferedSink.outputStream`获取。\n\n\n```Java\npublic static final MediaType MEDIA_TYPE_MARKDOWN\n    = MediaType.parse(\"text/x-markdown; charset=utf-8\");\n\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic void run() throws Exception {\nRequestBody requestBody = new RequestBody() {\n    @Override public MediaType contentType() {\n    return MEDIA_TYPE_MARKDOWN;\n    }\n\n    @Override public void writeTo(BufferedSink sink) throws IOException {\n    sink.writeUtf8(\"Numbers\\n\");\n    sink.writeUtf8(\"-------\\n\");\n    for (int i = 2; i <= 997; i++) {\n        sink.writeUtf8(String.format(\" * %s = %s\\n\", i, factor(i)));\n    }\n    }\n\n    private String factor(int n) {\n    for (int i = 2; i < n; i++) {\n        int x = n / i;\n        if (x * i == n) return factor(x) + \" × \" + i;\n    }\n    return Integer.toString(n);\n    }\n};\n\nRequest request = new Request.Builder()\n    .url(\"https://api.github.com/markdown/raw\")\n    .post(requestBody)\n    .build();\n\nResponse response = client.newCall(request).execute();\nif (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\nSystem.out.println(response.body().string());\n}\n```\n\n #### 使用POST发送一个文件\n 文件很容易当作一个请求体。\n\n```Java\npublic static final MediaType MEDIA_TYPE_MARKDOWN\n    = MediaType.parse(\"text/x-markdown; charset=utf-8\");\n\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic void run() throws Exception {\nFile file = new File(\"README.md\");\n\nRequest request = new Request.Builder()\n    .url(\"https://api.github.com/markdown/raw\")\n    .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, file))\n    .build();\n\nResponse response = client.newCall(request).execute();\nif (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\nSystem.out.println(response.body().string());\n}\n```\n\n #### 发送form 参数\n 使用`FormBody.Builder`来创建一个同HTML 的`form`标签方式相同的请求踢。名字和值会被编码成HTML兼容的URL编码。\n\n```Java\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic void run() throws Exception {\nRequestBody formBody = new FormBody.Builder()\n    .add(\"search\", \"Jurassic Park\")\n    .build();\nRequest request = new Request.Builder()\n    .url(\"https://en.wikipedia.org/w/index.php\")\n    .post(formBody)\n    .build();\n\nResponse response = client.newCall(request).execute();\nif (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\nSystem.out.println(response.body().string());\n}\n```\n\n #### 发送multipart请求\n `MultipartBody.Builder`可以创建和HTML上传文件兼容的请求。每一个multipart请求体自身也是请求体，可以有自己的header。如果提供了，这些header仅描述自身的一部分，例如`Content-Dispositon`。`Content-Type`,`Content-Length`如果可用会自动添加。\n \n```Java\nprivate static final String IMGUR_CLIENT_ID = \"...\";\nprivate static final MediaType MEDIA_TYPE_PNG = MediaType.parse(\"image/png\");\n\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic void run() throws Exception {\n// Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image\nRequestBody requestBody = new MultipartBody.Builder()\n    .setType(MultipartBody.FORM)\n    .addFormDataPart(\"title\", \"Square Logo\")\n    .addFormDataPart(\"image\", \"logo-square.png\",\n        RequestBody.create(MEDIA_TYPE_PNG, new File(\"website/static/logo-square.png\")))\n    .build();\n\nRequest request = new Request.Builder()\n    .header(\"Authorization\", \"Client-ID \" + IMGUR_CLIENT_ID)\n    .url(\"https://api.imgur.com/3/image\")\n    .post(requestBody)\n    .build();\n\nResponse response = client.newCall(request).execute();\nif (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\nSystem.out.println(response.body().string());\n}\n```\n #### 使用Gson解析响应JSON\n [Gson](http://code.google.com/p/google-gson/)是一个很顺手的转换Java对象和JSON的API。这里我们用它来解析GitHub响应的JSON。\n 注意，`ResponseBody.charStream()`使用`content-type`的响应header来选择解码响应流的字符集，如果没有提供默认使用UTF-8。\n\n```Java\nprivate final OkHttpClient client = new OkHttpClient();\nprivate final Gson gson = new Gson();\n\npublic void run() throws Exception {\nRequest request = new Request.Builder()\n    .url(\"https://api.github.com/gists/c2a7c39532239ff261be\")\n    .build();\nResponse response = client.newCall(request).execute();\nif (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\nGist gist = gson.fromJson(response.body().charStream(), Gist.class);\nfor (Map.Entry<String, GistFile> entry : gist.files.entrySet()) {\n    System.out.println(entry.getKey());\n    System.out.println(entry.getValue().content);\n}\n}\n\nstatic class Gist {\nMap<String, GistFile> files;\n}\n\nstatic class GistFile {\nString content;\n}\n```\n\n #### 响应缓存\n 为了换成响应需要又一个可读写的缓存目录并且限制缓存的大小。缓存目录应该是私有的，并且非信任的应用无权访问。  \n 同时访问一个缓冲目录回出现错误。大多数应用应该调用一次`new OkHttpClient()`，配置它的缓存，在其他地方使用统一个实例。否则两个缓存实例会互相损害，损坏换成，可能是你的应用崩溃。\n 响应缓存使用HTTP的header来配置。如果请求头添加了`Cache-Control: max-stale=3600`,OKHttp将会使用这些配置。是服务器来配置响应可以被缓存多长时间，通过响应头来配置，例如`Cache-Control: max-age=9600`。有一些header可以强制换成响应，强制一个网络返回或者强制一个有条件的GET确定缓存是否有效。\n \n```Java\nprivate final OkHttpClient client;\n\npublic CacheResponse(File cacheDirectory) throws Exception {\nint cacheSize = 10 * 1024 * 1024; // 10 MiB\nCache cache = new Cache(cacheDirectory, cacheSize);\n\nclient = new OkHttpClient.Builder()\n    .cache(cache)\n    .build();\n}\n\npublic void run() throws Exception {\nRequest request = new Request.Builder()\n    .url(\"http://publicobject.com/helloworld.txt\")\n    .build();\n\nResponse response1 = client.newCall(request).execute();\nif (!response1.isSuccessful()) throw new IOException(\"Unexpected code \" + response1);\n\nString response1Body = response1.body().string();\nSystem.out.println(\"Response 1 response:          \" + response1);\nSystem.out.println(\"Response 1 cache response:    \" + response1.cacheResponse());\nSystem.out.println(\"Response 1 network response:  \" + response1.networkResponse());\n\nResponse response2 = client.newCall(request).execute();\nif (!response2.isSuccessful()) throw new IOException(\"Unexpected code \" + response2);\n\nString response2Body = response2.body().string();\nSystem.out.println(\"Response 2 response:          \" + response2);\nSystem.out.println(\"Response 2 cache response:    \" + response2.cacheResponse());\nSystem.out.println(\"Response 2 network response:  \" + response2.networkResponse());\n\nSystem.out.println(\"Response 2 equals Response 1? \" + response1Body.equals(response2Body));\n}\n```\n\n 为了阻止缓冲可以使用`[CacheControl.FORCE_NETWORK](CacheControl.FORCE_NETWORK)`.为了阻止网络连接可以使用`[CacheControl.FORCE_CACHE](http://square.github.io/okhttp/3.x/okhttp/okhttp3/CacheControl.html#FORCE_CACHE)`。警告：如果使用了`FORCE_CACHE`并且响应需要网络，将会返回`504 Unsatisfiable Request`。\n #### 取消请求\n 使用`Call.cancel()`立即取消正在进行的请求。如果一个线程正在写一个请求或者读一个响应将会抛出IOException。当一个请求不在需要的时候使用这个函数来保护网络。例如当用户导航离开应用的时候。同步和异步的请求都可以取消。\n \n```Java\nprivate final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic void run() throws Exception {\nRequest request = new Request.Builder()\n    .url(\"http://httpbin.org/delay/2\") // This URL is served with a 2 second delay.\n    .build();\n\nfinal long startNanos = System.nanoTime();\nfinal Call call = client.newCall(request);\n\n// Schedule a job to cancel the call in 1 second.\nexecutor.schedule(new Runnable() {\n    @Override public void run() {\n    System.out.printf(\"%.2f Canceling call.%n\", (System.nanoTime() - startNanos) / 1e9f);\n    call.cancel();\n    System.out.printf(\"%.2f Canceled call.%n\", (System.nanoTime() - startNanos) / 1e9f);\n    }\n}, 1, TimeUnit.SECONDS);\n\ntry {\n    System.out.printf(\"%.2f Executing call.%n\", (System.nanoTime() - startNanos) / 1e9f);\n    Response response = call.execute();\n    System.out.printf(\"%.2f Call was expected to fail, but completed: %s%n\",\n        (System.nanoTime() - startNanos) / 1e9f, response);\n} catch (IOException e) {\n    System.out.printf(\"%.2f Call failed as expected: %s%n\",\n        (System.nanoTime() - startNanos) / 1e9f, e);\n}\n}\n```\n\n #### 超时\n 当端点不可达的时候使用超时使请求失败。网络分区可能是客户端连接问题，服务器可用性问题或者其他问题。OKHttp支持连接，读，写超时。\n \n```Java\nprivate final OkHttpClient client;\n\npublic ConfigureTimeouts() throws Exception {\nclient = new OkHttpClient.Builder()\n    .connectTimeout(10, TimeUnit.SECONDS)\n    .writeTimeout(10, TimeUnit.SECONDS)\n    .readTimeout(30, TimeUnit.SECONDS)\n    .build();\n}\n\npublic void run() throws Exception {\nRequest request = new Request.Builder()\n    .url(\"http://httpbin.org/delay/2\") // This URL is served with a 2 second delay.\n    .build();\n\nResponse response = client.newCall(request).execute();\nSystem.out.println(\"Response completed: \" + response);\n}\n ```\n\n #### 调用前配置\n 所有的HTTP调用配置都会在`OkHttpClient`中，包括，代理设置，超时和缓存。当需要修改某个调用的配置的时候，使用`OKHttpClient.newBuilder()`。这个函数会返回共享的连接池，调度器，并且跟原始client相同的配置。在下面这个例子中，一个请求的超时时间是500ms另一个是3000ms。\n\n ```Java\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic void run() throws Exception {\nRequest request = new Request.Builder()\n    .url(\"http://httpbin.org/delay/1\") // This URL is served with a 1 second delay.\n    .build();\n\ntry {\n    // Copy to customize OkHttp for this request.\n    OkHttpClient copy = client.newBuilder()\n        .readTimeout(500, TimeUnit.MILLISECONDS)\n        .build();\n\n    Response response = copy.newCall(request).execute();\n    System.out.println(\"Response 1 succeeded: \" + response);\n} catch (IOException e) {\n    System.out.println(\"Response 1 failed: \" + e);\n}\n\ntry {\n    // Copy to customize OkHttp for this request.\n    OkHttpClient copy = client.newBuilder()\n        .readTimeout(3000, TimeUnit.MILLISECONDS)\n        .build();\n\n    Response response = copy.newCall(request).execute();\n    System.out.println(\"Response 2 succeeded: \" + response);\n} catch (IOException e) {\n    System.out.println(\"Response 2 failed: \" + e);\n}\n}\n ```\n\n #### 处理认证\n OKHttp会自动重试认证请求。当响应是`401 Not Authorized`,`Authenticator`需要用来提供凭证。将会重新实现一个带有凭证的请求，如果没有凭证可用跳过重试，返回null。\n 使用` Response.challenges()`来获取任何认证口令的方案和域。当使用`Basic`认证的时候使用`Credentials.basic(username,password)`来编码一个header。\n \n```Java\nprivate final OkHttpClient client;\n\npublic Authenticate() {\nclient = new OkHttpClient.Builder()\n    .authenticator(new Authenticator() {\n        @Override public Request authenticate(Route route, Response response) throws IOException {\n        System.out.println(\"Authenticating for response: \" + response);\n        System.out.println(\"Challenges: \" + response.challenges());\n        String credential = Credentials.basic(\"jesse\", \"password1\");\n        return response.request().newBuilder()\n            .header(\"Authorization\", credential)\n            .build();\n        }\n    })\n    .build();\n}\n\npublic void run() throws Exception {\nRequest request = new Request.Builder()\n    .url(\"http://publicobject.com/secrets/hellosecret.txt\")\n    .build();\n\nResponse response = client.newCall(request).execute();\nif (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\nSystem.out.println(response.body().string());\n}\n```\n","date":"2017-03-19"},{"title":"http.Handler 与Go的错误处理","tags":["Go","Translate","backend"],"iso8601Date":"2015-11-13T05:24:57+08:00","basename":"http-Handler-与Go的错误处理","body":"\n\n[原文地址](http://elithrar.github.io/article/http-handler-error-handling-revisited/)\n\n 在之前我写过一篇关于通过使用`http.HandlerFunc`来实现一个定制handler类型用来避免一些平常的错误的[文章](http://elithrar.github.io/article/custom-handlers-avoiding-globals/)。`func MyHandler(w http.ResponseWriter, r *http.Request)`的签名经常可以看到。这是一个有用的通用的包含一些基本功能的handler类型，但是和其他事情一样，也有一些不足：\n* 当你想要在一个handler中停止处理的时候，必须记得显示的调用一个return。这个在当你想要跑出一个从定向（301、302），未找到（404）或者服务器端错误（500）的状态的时候是很平常的。如果不这么做可能会引起一些微妙的错误（函数会继续执行），因为函数不需要一个返回值，编译器也不会警告你。\n* 不容易传递额外的参数（例如，数据库连接池，配置）。你最后不得不实用一系列的全局变量（不算太坏，但是跟踪他们会导致难以扩展）或者将他们存到请求上下文中，然后每次都从其取出。这样做很笨重。\n* 一直在不断的重复同样的语句。想要记录数据库包返回的错误？既可以再每个查询方法中调用`log.Printf`，也可以再每个handler中返回错误。如果你的handler可以返回给一个集中记录错误的函数，并且跑出一个500的错误就更好了。\n\n 我以前的方法中使用了`func(http.ResponseWriter, *http.Request)`签名。这已经被证明是一个简介的方式，但是有个奇怪的地方是，返回一个无错误的状态，例如，200,302,303往往是多余的，因为要么你已经在其他地方设置了，要么就是没用的。例如：\n\n```Go\nfunc SomeHandler(w http.ResponseWriter, r *http.Request) (int, error) {\n    db, err := someDBcall()\n    if err != nil {\n        // This makes sense.\n        return 500, err\n    }\n\n    if user.LoggedIn {\n        http.Redirect(w, r, \"/dashboard\", 302)\n        // Superfluous! Our http.Redirect function handles the 302, not \n        // our return value (which is effectively ignored).\n        return 302, nil\n    }\n\n}\n```\n\n看起来还行，但是我们可以做的更好\n\n### 一些区别\n\n 那么我们应该如何改进它？我们先列出代码：\n\n```Go\npackage handler\n\n// Error represents a handler error. It provides methods for a HTTP status \n// code and embeds the built-in error interface.\ntype Error interface {\n    error\n    Status() int\n}\n\n// StatusError represents an error with an associated HTTP status code.\ntype StatusError struct {\n    Code int\n    Err  error\n}\n\n// Allows StatusError to satisfy the error interface.\nfunc (se StatusError) Error() string {\n    return se.Err.Error()\n}\n\n// Returns our HTTP status code.\nfunc (se StatusError) Status() int {\n    return se.Code\n}\n\n// A (simple) example of our application-wide configuration.\ntype Env struct {\n    DB   *sql.DB\n    Port string\n    Host string\n}\n\n// The Handler struct that takes a configured Env and a function matching\n// our useful signature.\ntype Handler struct {\n    *Env\n    H func(e *Env, w http.ResponseWriter, r *http.Request) error\n}\n\n// ServeHTTP allows our Handler type to satisfy http.Handler.\nfunc (h Handler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    err := h.H(h.Env, w, r)\n    if err != nil {\n        switch e := err.(type) {\n        case Error:\n            // We can retrieve the status here and write out a specific\n            // HTTP status code.\n            log.Printf(\"HTTP %d - %s\", e.Status(), e)\n            http.Error(w, e.Error(), e.Status())\n        default:\n            // Any error types we don't specifically look out for default\n            // to serving a HTTP 500\n            http.Error(w, http.StatusText(http.StatusInternalServerError),\n                http.StatusInternalServerError)\n        }\n    }\n}\n```\n\n 上面的代码不言自明，但是要说明一下一些突出的观点：\n\n* 我们自定义了一个`Error`类型（接口），他内嵌了Go的内建的error接口，同时提供了一个`Status() int`方法。\n* 我们提供了一个简单的`StatusError`类型（结构体），它满足`handler.Error`的接口。StatusError接受一个HTTP的状态码（int类型），一个可以让我们包装错误用来记录或者查询的error类型。\n* 我们的`ServeHTTP`方法包好了一个\"e := err.(type)\"的类型断言，它可以测试我们需要处理的错误，允许我们处理那些特别的错误。在这个例子中，他是只是一个`handler.Error`类型。其他的错误，例如其他包中的错误想net.Error，或者其他我们定义的额外的错误，如果想要检查，同样也可以检查。\n\n 如果我们不想捕捉那些错误，那么`default`将会默认捕捉到。记住一点，`ServeHTTP`可以使我们的Handler类型满足http.Handler接口，这样他就可以在任何使用http.Handler的地方使用了，例如Go的net/http包或者所有的其他的第三方框架。这样使得定制的handler更有用，他们用起来很灵活。\n 注意 net 包处理事情很简单。它又一个net.Error的接口，内嵌了内建的error接口。一些具体的类型实现了它。函数返回的具体类型跟错误的类型相同（DNS错误，解析错误等）。再datastore 包中定义的DBError有一个Query() string 方法，可以很好的解释。\n\n### 所有示例\n\n 它最后是什么样子的？我们是否可以将其分到不同的包中？\n\n```Go\npackage handler\n\nimport (\n    \"net/http\"\n)\n\n// Error represents a handler error. It provides methods for a HTTP status \n// code and embeds the built-in error interface.\ntype Error interface {\n    error\n    Status() int\n}\n\n// StatusError represents an error with an associated HTTP status code.\ntype StatusError struct {\n    Code int\n    Err  error\n}\n\n// Allows StatusError to satisfy the error interface.\nfunc (se StatusError) Error() string {\n    return se.Err.Error()\n}\n\n// Returns our HTTP status code.\nfunc (se StatusError) Status() int {\n    return se.Code\n}\n\n// A (simple) example of our application-wide configuration.\ntype Env struct {\n    DB   *sql.DB\n    Port string\n    Host string\n}\n\n// The Handler struct that takes a configured Env and a function matching\n// our useful signature.\ntype Handler struct {\n    *Env\n    H func(e *Env, w http.ResponseWriter, r *http.Request) error\n}\n\n// ServeHTTP allows our Handler type to satisfy http.Handler.\nfunc (h Handler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    err := h.H(h.Env, w, r)\n    if err != nil {\n        switch e := err.(type) {\n        case Error:\n            // We can retrieve the status here and write out a specific\n            // HTTP status code.\n            log.Printf(\"HTTP %d - %s\", e.Status(), e)\n            http.Error(w, e.Error(), e.Status())\n        default:\n            // Any error types we don't specifically look out for default\n            // to serving a HTTP 500\n            http.Error(w, http.StatusText(http.StatusInternalServerError),\n                http.StatusInternalServerError)\n        }\n    }\n}\n\nfunc GetIndex(env *Env, w http.ResponseWriter, r *http.Request) error {\n    users, err := env.DB.GetAllUsers()\n    if err != nil {\n        // We return a status error here, which conveniently wraps the error\n        // returned from our DB queries. We can clearly define which errors \n        // are worth raising a HTTP 500 over vs. which might just be a HTTP \n        // 404, 403 or 401 (as appropriate). It's also clear where our \n        // handler should stop processing by returning early.\n        return StatusError{500, err}\n    }\n\n    fmt.Fprintf(w, \"%+v\", users)\n    return nil\n}\n```\n\n main包：\n\n```Go\npackage main\n\nimport (\n    \"net/http\"\n    \"github.com/you/somepkg/handler\"\n)\n\nfunc main() {\n    db, err := sql.Open(\"connectionstringhere\")\n    if err != nil {\n          log.Fatal(err)\n    }\n\n    // Initialise our app-wide environment with the services/info we need.\n    env := &handler.Env{\n        DB: db,\n        Port: os.Getenv(\"PORT\"),\n        Host: os.Getenv(\"HOST\"),\n        // We might also have a custom log.Logger, our \n        // template instance, and a config struct as fields \n        // in our Env struct.\n    }\n\n    // Note that we're using http.Handle, not http.HandleFunc. The \n    // latter only accepts the http.HandlerFunc type, which is not \n    // what we have here.\n    http.Handle(\"/\", handler.Handler{env, handler.GetIndex})\n\n    // Logs the error if ListenAndServe fails.\n    log.Fatal(http.ListenAndServe(\":8000\", nil))\n}\n```\n\n 在实际使用时，会将handler和Env放入不同的包中，这里只是为了简单放在了同一个包中。\n\n","date":"2015-11-13"},{"title":"HTTP/2 和GO","tags":["http","HTTP/2","Translate","Go","backend"],"iso8601Date":"2015-11-12T19:39:21+08:00","basename":"HTTP-2-和GO","body":"\n[原文地址](https://www.ianlewis.org/en/http2-and-go)\n\nHTTP/2是一个添加了一些新功能的HTTP的新版本，这些功能包括连接复用，首部压缩。再Go的标准库中暂时还没有HTTP/2的实现，但是现在有很多正在开发的库可以用来在Go中实现HTTP/2的server和client。\n\nBrad Fitzpatrick实现了一个[golang.org/x/net/http2](https://godoc.org/golang.org/x/net/http2)的库，这个库甚至最终会加入到标准库中，不过他现在正在开发，所以在其他的库中。因为他现在的开发很活跃，所有情况因人而异，但是如果你想实现HTTP/2的服务器，仍然可以使用这个库。\n\n### 创建HTTP/2服务器\n\n使用http2的库写一个服务器是很简单的。http2库和标准库的http包集成在一起，需要调用`http2.ConfigureServer()`来配置一个普通http使用HTTP/2协议。如果需要通过浏览器访问或者降级到HTTP 1.x 协议，那么你需要设置TLS 加密。虽然加密不是必须的，但是现在还没有浏览器支持非加密的HTTP/2协议。\n\n```Go\npackage main\n\nimport (\n    \"log\"\n    \"net/http\"\n    \"os\"\n\n    \"golang.org/x/net/http2\"\n)\n\nfunc main() {\n    cwd, err := os.Getwd()\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    srv := &http.Server{\n        Addr:    \":8000\", // Normally \":443\"\n        Handler: http.FileServer(http.Dir(cwd)),\n    }\n    http2.ConfigureServer(srv, &http2.Server{})\n    log.Fatal(srv.ListenAndServeTLS(\"server.crt\", \"server.key\"))\n}\n```\n\n### 创建HTTP/2 客户端\n\n现在使用http2的库创建客户端很hacky。虽然它会输出很多调试日志，但是对于大多数情况下运行的很好。可以使用`http2.Transport`对象，将他传给`http`包的client。\n\n```Go\npackage main\n\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n    \"log\"\n    \"net/http\"\n\n    \"golang.org/x/net/http2\"\n)\n\nfunc main() {\n    client := http.Client{\n        // InsecureTLSDial is temporary and will likely be\n        // replaced by a different API later.\n        Transport: &http2.Transport{InsecureTLSDial: true},\n    }\n\n    resp, err := client.Get(\"https://localhost:8000/\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    body, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Println(string(body))\n}\n```\n\n### 更多阅读\n\n如果你对HTTP/2协议感兴趣，那么可以参考[HTTP/2 主页](https://http2.github.io/)，这个页面有很多其他资料的连接还有其他语言的实现。\n\n如果你想知道HTTP/2的服务端和客户端是如何实现的，那么[Jxck's http2 implementation](https://github.com/Jxck/http2)的实现就很值得一读。Jxck通过对标准的HTTP库的TLSNextProto设置一个钩子来实现的。你可以再这里阅读一些[示例](https://github.com/Jxck/http2/blob/master/sample/http.go)。\n\ngrpc-go 库同样也有自己的服务端和客户端的实现。\n","date":"2015-11-12"},{"title":"Go Web 架构","tags":["Go","Architecture","Translate","backend","Web"],"iso8601Date":"2015-11-11T03:01:21+08:00","basename":"Go-Web-架构","body":"\n\n[原文地址](https://larry-price.com/blog/2015/06/25/architecture-for-a-golang-web-app)\n\n使用Golang来创建Web项目是一件很麻烦的事情。如果你使用Rails，那么你可能不会有这个感触。我在[Refer Madness](https://www.refer-madness.com/)中使用了下面这个架构。\n\n```bash\n-public/\n-views/\n-models/\n-utils/\n-controllers/\n-web/\n-main.go\n```\n\n我将打破这个体系，介绍各个目录的作用。在每个目录下，文件只能访问其同级或者上一级。这就意味着`utils`只能访问他自己和`models`，`web`只能访问它自己，`controllers`，`utils`，`models`。`models`只能访问它自己。我这么做是为了让层次清晰，防止出现递归依赖。现在来分析每一个目录，文件的作用。\n\n#### main.go\n\n`main.go`是创建依赖，获取环境变量，启动服务的主要文件。下面是它的实例。\n\n```Go\npackage main\n\nimport (\n  \"github.com/larryprice/refermadness/utils\"\n  \"github.com/larryprice/refermadness/web\"\n  \"github.com/stretchr/graceful\"\n  \"os\"\n)\n\nfunc main() {\n  isDevelopment := os.Getenv(\"ENVIRONMENT\") == \"development\"\n  dbURL := os.Getenv(\"MONGOLAB_URI\")\n  if isDevelopment {\n    dbURL = os.Getenv(\"DB_PORT_27017_TCP_ADDR\")\n  }\n\n  dbAccessor := utils.NewDatabaseAccessor(dbURL, os.Getenv(\"DATABASE_NAME\"), 0)\n  cuAccessor := utils.NewCurrentUserAccessor(1)\n  s := web.NewServer(*dbAccessor, *cuAccessor, os.Getenv(\"GOOGLE_OAUTH2_CLIENT_ID\"),\n    os.Getenv(\"GOOGLE_OAUTH2_CLIENT_SECRET\"), os.Getenv(\"SESSION_SECRET\"),\n    isDevelopment, os.Getenv(\"GOOGLE_ANALYTICS_KEY\"))\n\n  port := os.Getenv(\"PORT\")\n  if port == \"\" {\n    port = \"3000\"\n  }\n\n  graceful.Run(\":\"+port, 0, s)\n}\n\n```\n\n因为`main.go`实在最低的层级，所以它可以访问所有的目录：在这个例子里是`web`和`utils`。在这里获取了所有的环境变量并把它们注入到合适的地方。在`main.go`中创建了服务器，注入依赖，并且在配置的端口启动服务器。\n\n#### web\n\n`web`目录下是主要的服务代码，同时也包括了中间件代码。下面是`web`目录的内部结构：\n\n```bash\n-web/\n|-middleware/\n|-server.go\n```\n\n`server.go`包含了web server的定义。这个web server 创建了所有的web controller并且给negroni添加了中间件。下面是他的例子：\n\n```Go\npackage web\n\nimport (\n  \"github.com/codegangsta/negroni\"\n  \"github.com/goincremental/negroni-sessions\"\n  \"github.com/goincremental/negroni-sessions/cookiestore\"\n  \"github.com/gorilla/mux\"\n  \"github.com/larryprice/refermadness/controllers\"\n  \"github.com/larryprice/refermadness/utils\"\n  \"github.com/larryprice/refermadness/web/middleware\"\n  \"github.com/unrolled/secure\"\n  \"gopkg.in/unrolled/render.v1\"\n  \"html/template\"\n  \"net/http\"\n)\n\ntype Server struct {\n  *negroni.Negroni\n}\n\nfunc NewServer(dba utils.DatabaseAccessor, cua utils.CurrentUserAccessor, clientID, clientSecret,\n  sessionSecret string, isDevelopment bool, gaKey string) *Server {\n  s := Server{negroni.Classic()}\n  session := utils.NewSessionManager()\n  basePage := utils.NewBasePageCreator(cua, gaKey)\n  renderer := render.New()\n\n  router := mux.NewRouter()\n\n  // ...\n\n  accountController := controllers.NewAccountController(clientID, clientSecret, isDevelopment, session, dba, cua, basePage, renderer)\n  accountController.Register(router)\n\n  // ...\n\n  s.Use(sessions.Sessions(\"refermadness\", cookiestore.New([]byte(sessionSecret))))\n  s.Use(middleware.NewAuthenticator(dba, session, cua).Middleware())\n  s.UseHandler(router)\n  return &s\n}\n```\n\n`Server`结构体是一个`negroni.Negroni`的web server，在这个文件里有对`utils`和其他第三方包的引用，创建了一个router，一些controller，并且将controller注册到当前router。同时也引入了必要的中间件。说到中间件，下面是它的代码：\n\n```Go\npackage middleware\n\nimport (\n  \"github.com/codegangsta/negroni\"\n  \"github.com/larryprice/refermadness/utils\"\n  \"net/http\"\n)\n\ntype Database struct {\n  da utils.DatabaseAccessor\n}\n\nfunc NewDatabase(da utils.DatabaseAccessor) *Database {\n  return &Database{da}\n}\n\nfunc (d *Database) Middleware() negroni.HandlerFunc {\n  return func(rw http.ResponseWriter, r *http.Request, next http.HandlerFunc) {\n    reqSession := d.da.Clone()\n    defer reqSession.Close()\n    d.da.Set(r, reqSession)\n    next(rw, r)\n  }\n}\n```\n\n这个是通过HTTP router访问数据库session的标注中间件。基本文件是从[Brian Gesiak’s blog post on RESTful Go](http://modocache.svbtle.com/restful-go)中得到，将其修改为适合我的文件。\n\n#### controllers/\n\n这里的controller与Rails里的controller的概念很像。Controller注册自己的router，设置自己的函数调用。一个简短的例子如下：\n\n```Go\npackage controllers\n\nimport (\n  \"encoding/json\"\n  \"errors\"\n  \"github.com/gorilla/mux\"\n  \"github.com/larryprice/refermadness/models\"\n  \"github.com/larryprice/refermadness/utils\"\n  \"gopkg.in/mgo.v2/bson\"\n  \"gopkg.in/unrolled/render.v1\"\n  \"html/template\"\n  \"net/http\"\n  \"strings\"\n)\n\ntype ServiceControllerImpl struct {\n  currentUser utils.CurrentUserAccessor\n  basePage    utils.BasePageCreator\n  renderer    *render.Render\n  database    utils.DatabaseAccessor\n}\n\nfunc NewServiceController(currentUser utils.CurrentUserAccessor, basePage utils.BasePageCreator,\n  renderer *render.Render, database utils.DatabaseAccessor) *ServiceControllerImpl {\n  return &ServiceControllerImpl{\n    currentUser: currentUser,\n    basePage:    basePage,\n    renderer:    renderer,\n    database:    database,\n  }\n}\n\nfunc (sc *ServiceControllerImpl) Register(router *mux.Router) {\n  router.HandleFunc(\"/service/{id}\", sc.single)\n  // ...\n}\n\n// ...\n\ntype serviceResult struct {\n  *models.Service\n  RandomCode *models.ReferralCode\n  UserCode   *models.ReferralCode\n}\n\ntype servicePage struct {\n  utils.BasePage\n  ResultString string\n}\n\nfunc (sc *ServiceControllerImpl) single(w http.ResponseWriter, r *http.Request) {\n  data, err := sc.get(w, r)\n\n  if len(r.Header[\"Content-Type\"]) == 1 && strings.Contains(r.Header[\"Content-Type\"][0], \"application/json\") {\n    if err != nil {\n      sc.renderer.JSON(w, http.StatusBadRequest, map[string]string{\n        \"error\": err.Error(),\n      })\n      return\n    }\n    sc.renderer.JSON(w, http.StatusOK, data)\n    return\n  } else if err != nil {\n    http.Error(w, err.Error(), http.StatusBadRequest)\n  }\n\n  resultString, _ := json.Marshal(data)\n  t, _ := template.ParseFiles(\"views/layout.html\", \"views/service.html\")\n  t.Execute(w, servicePage{sc.basePage.Get(r), string(resultString)})\n}\n```\n\n#### utils/\n\n在`utils`目录下的文件提供了一些底层功能用来支持其他的代码。在这个例子中，主要是定义一个结构体来访问请求的上下文，处理session，定义一个特别的页面来继承。下面是通过访问上下文设置用户的例子：\n\n```Go\npackage utils\n\nimport (\n  \"github.com/gorilla/context\"\n  \"github.com/larryprice/refermadness/models\"\n  \"net/http\"\n)\n\ntype CurrentUserAccessor struct {\n  key int\n}\n\nfunc NewCurrentUserAccessor(key int) *CurrentUserAccessor {\n  return &CurrentUserAccessor{key}\n}\n\nfunc (cua *CurrentUserAccessor) Set(r *http.Request, user *models.User) {\n  context.Set(r, cua.key, user)\n}\n\nfunc (cua *CurrentUserAccessor) Clear(r *http.Request) {\n  context.Delete(r, cua.key)\n}\n\nfunc (cua *CurrentUserAccessor) Get(r *http.Request) *models.User {\n  if rv := context.Get(r, cua.key); rv != nil {\n    return rv.(*models.User)\n  }\n  return nil\n}\n```\n\n#### models/\n\nmodel 是为了描述数据库中的数据的数据结构。在这个例子中使用model来访问数据库，创建一个空的model，然后通过查询数据库为其赋值。下面是一个例子：\n\n```Go\npackage models\n\nimport (\n  \"gopkg.in/mgo.v2\"\n  \"gopkg.in/mgo.v2/bson\"\n  \"strings\"\n  \"time\"\n)\n\ntype Service struct {\n  // identification information\n  ID          bson.ObjectId `bson:\"_id\"`\n  Name        string        `bson:\"name\"`\n  Description string        `bson:\"description\"`\n  URL         string        `bson:\"url\"`\n  Search      string        `bson:\"search\"`\n}\n\nfunc NewService(name, description, url string, creatorID bson.ObjectId) *Service {\n  url = strings.TrimPrefix(strings.TrimPrefix(url, \"http://\"), \"https://\")\n  return &Service{\n    ID:            bson.NewObjectId(),\n    Name:          name,\n    URL:           url,\n    Description:   description,\n    Search:        strings.ToLower(name) + \";\" + strings.ToLower(description) + \";\" + strings.ToLower(url),\n  }\n}\n\nfunc (s *Service) Save(db *mgo.Database) error {\n  _, err := s.coll(db).UpsertId(s.ID, s)\n  return err\n}\n\nfunc (s *Service) FindByID(id bson.ObjectId, db *mgo.Database) error {\n  return s.coll(db).FindId(id).One(s)\n}\n\nfunc (*Service) coll(db *mgo.Database) *mgo.Collection {\n  return db.C(\"service\")\n}\n\ntype Services []Service\n\nfunc (s *Services) FindByIDs(ids []bson.ObjectId, db *mgo.Database) error {\n  return s.coll(db).Find(bson.M{\"_id\": bson.M{\"$in\": ids}}).Sort(\"name\").All(s)\n}\n\nfunc (*Services) coll(db *mgo.Database) *mgo.Collection {\n  return db.C(\"service\")\n}\n\n```\n\n#### views/\n\n将Golang的模板文件放到`views`目录下。这样，不管用什么样的模板引擎都可以直接放到`views`下。\n\n#### public/\n\n跟以前一样，这个文件都是放公开的文件的，例如`css`,`img`,`scripts`。\n\n#### 如何运行\n\n毫无疑问，我最喜欢的就是[docker](https://www.docker.com/)，因此我将使用他来运行这个应用。如果不使用docker，那么可以将文件放到`$GOPATH/src/github.com/larryprice/refermadness`,运行`go get`来获取所有的依赖，然后运行 `go run main.go`或者`go build; ./refermadness`运行程序。如果你也喜欢使用docker，那么可以直接通过`Dockerfile`来运行。\n\n```bash\nFROM golang:1.4\n\nRUN go get github.com/codegangsta/gin\n\nADD . /go/src/github.com/larryprice/refermadness\nWORKDIR /go/src/github.com/larryprice/refermadness\nRUN go get\n```\n\n同时我也很喜欢[compose](https://github.com/docker/compose)，所以我也通过compose 文件来运行所有的应用。我用了JSC ，SASS和mongodb，所以一下是我的`docker-compose.yml`文件。\n\n```Go\nmain:\n  build: .\n  command: gin run\n  env_file: .env\n  volumes:\n    - ./:/go/src/github.com/larryprice/refermadness\n  working_dir: /go/src/github.com/larryprice/refermadness\n  ports:\n    - \"3000:3000\"\n  links:\n    - db\nsass:\n  image: larryprice/sass\n  volumes:\n    - ./public/css:/src\njsx:\n  image: larryprice/jsx\n  volumes:\n    - ./public/scripts:/src\ndb:\n  image: mongo:3.0\n  command: mongod --smallfiles --quiet --logpath=/dev/null\n  volumes_from:\n    - dbvolume\ndbvolume:\n  image: busybox:ubuntu-14.04\n  volumes:\n    - /data/db\n```\n\n然后运行`docker-compose up`来运行所有的容器并启动服务器。\n\n\n","date":"2015-11-11"},{"title":"Ansible 入门指南","tags":["Ansible","Translate","backend"],"iso8601Date":"2015-11-10T02:26:35+08:00","basename":"Ansible-入门指南","body":"\n\n[原文地址](http://docs.ansible.com/ansible/intro_getting_started.html)\n\n## 快速入门\n\n### 前言\n\n 现在你已经知道如何[安装](http://docs.ansible.com/ansible/intro_installation.html)Ansible了，现在可以深入并开始使用Ansible的一些命令了。\n 我们开始展示的并不是Ansible强大的配置、部署、调度的功能。这些功能由其他章节要讲的Playbook来处理。\n 这个章节是关于如何快速入门的。等你了解了Ansible的这些概念之后，就可以阅读[特别命令简介](http://docs.ansible.com/ansible/intro_adhoc.html)来学习更多细节，接着你就可以深入理解Playbook，并且浏览更多的有趣功能。\n\n### 远程连接信息\n\n 在我们开始学习之前，理解Ansible是如何通过SSH连接到远程服务器是很重要的。\n 默认情况下，如果可以，Ansible 1.3 及其后续版本会使用原生的OpenSSh来连接远程服务器。这样就可以在~/.ssh/config下开启ControPersist(一个高性能的功能),Kerbos和其他选项，例如跳板机设置。然后，如果使用了Enterprise Linux 6(Red Hat Enterprise Linux 和其衍生版本，例如CentOS) 系统作为控制机，OpenSSH的版本可能过低导致无法开启ControlPersist功能。在这些操作系统中，Ansible将会回退到使用“paramiko”，他是OpenSSH的一个高质量的Python实现。如果你想使用像Kerberized SSH 等这样的功能，那么可以使用Federa，OSX或者Ubuntu作为你的控制机，直到你使用的平台有了更新的OpenSSH，或者你可以开启加速功能。[加速功能](http://docs.ansible.com/ansible/playbooks_acceleration.html)。\n 如果使用的版本小于等于1.2，那么默认使用的就是paramiko，如果想要使用原生的SSH，那么需要加上-c ssh 选项或者再配置文件中配置。\n 可能偶尔在某些机器上不支持SFTP协议，虽然这种情况很少，但是也可能发生，这个时候可以在[配置文件](http://docs.ansible.com/ansible/intro_configuration.html)中切换到SCP模式。\n 当需要和远程主机会话是，Ansible默认假设你使用SSH keys。Ansible鼓励使用SSH 免密码登陆，但是使用密码登陆也是可以的，在使用的时候加上参数`--ask-pass`。如果需要使用sudo权限，那么也要提供`--ask-sudo-pass`参数。\n 任何管理系统运行时离被管理的系统越近越好。虽然这是个常识，但是还是值得分享的。如果你在云端使用Ansible，那么就把Ansible运行在云端。在大多数情况下，它都比直接在公共网络上运行更好。\n 作为一个高级话题，Ansible并不仅仅通过SSH连接主机。连接系统是可插拔的，有很多配置选项可以用来本地管理，例如管理chroot，lxc，jail container。一个叫做“Ansible-pull”的模式可以反转系统。通过配置好的git checkout 从中央存储库pull配置文件获取系统的“phone home”。\n\n### 第一个命令\n\n 目前为止，已经安装好Ansible了，现在可以开始运行一些简单的命令了。\n 编辑（或者创建）`/etc/ansible/hosts`文件，向其添加一个或者多个远程主机地址。本机的public ssh key 应该已经追加到远程主机的`authorized_keys`文件中。\n\n```bash\n192.168.1.50\naserver.example.org\nbserver.example.org\n```\n\n 这是一个清单文件，同样会再[主机清单](http://docs.ansible.com/ansible/intro_inventory.html)中介绍。\n 假设你使用的是SSH授权方式，设置ssh angent 防止重复输入密码。\n\n```bash\nssh-agent bash\nssh-add ~/.ssh/id_rsa\n```\n\n(根据你的设置，你可能需要使用`--private-key`选项来制定一个pem文件)\n 现在可以ping一下所有的主机了。\n\n```bash\nansible all -m ping\n```\n\n Ansible会想SSH那样使用你本机的用户名去连接远程机器，如果不想使用本机用户名，可以加上`-u`的选项。\n 如果你想使用sudo权限，同样也可以将上`--sudo`选项。\n\n```bash\n# as bruce\n$ ansible all -m ping -u bruce\n# as bruce sudoing to root\n$ ansible all -m ping -u bruce --sudo\n# as bruce, sudoing to batman\n$ ansible all -m ping -u bruce --sudo --sudo-user batman\n\n# With latest version of ansible `sudo` is deprecated so use become\n# as bruce, sudoing to root\n$ ansible all -m ping -u bruce -b\n# as bruce, sudoing to batman\n$ ansible all -m ping -u bruce -b --become-user batman\n```\n\n(如果你突然想改变sudo 用户，可以再配置文件中修改。传递给sudo的标记例如-H也可以在那修改。)\n\n 现在在你所有的节点上运行一个实时的命令。\n\n```bash\n$ ansible all -a \"/bin/echo hello\"\n```\n\n 太棒了，刚刚通过Ansible与远程主机会话了。很快就可以阅读[更多命令介绍](http://docs.ansible.com/ansible/intro_adhoc.html)来学习更多的实际例子，浏览各个模块都可以做什么，以及学习Ansible [Playbooks](http://docs.ansible.com/ansible/playbooks.html)的语法。Ansible不仅仅只能用来运行命令，他还有强大的配置管理系统和部署功能。还有许多需要学习的知识，但是你现在已经有一个完全可以运行的环境了。\n\n### 主机密钥检查\n\n Ansible 1.2.1 及其之后的版本，默认是有主机密钥检查功能的。\n 如果远程主机成新安装并且在`know_hosts`下有一个不同的key，直到修复之前，Ansible会一直返回错误。如果主机没有在`know_hosts`文件中，那么会出现提示来确认密钥。这样就会有一个你不希望的提示。\n&emps; 如果你知道这个功能的影响，并且希望关闭这个功能，可以修改`/etc/ansible/ansible.cfg`或者是`~/.ansible.cfg`来关闭这个功能。\n\n```bash\n[default]\nhost_key_checking = False\n```\n\n 同样也可以通过环境变量来修改。\n\n```bash\n$ export ANSIBLE_HOST_KEY_CHECKING=False\n```\n\n 同时要注意主机密钥检查再paramiko模式中是很慢的，所以如果要使用这个功能最好使用ssh模式。\n 除非Ansible的任务被标记为\"no_log:True\"，否则Ansible会再远程注意的syslog中记录一些有用的信息。这个稍后再做解释。\n 如果要再本机开启log可以查看[配置章节](http://docs.ansible.com/ansible/intro_configuration.html)来设置“log_path”开启。企业用户可能会对[Ansible Tower](http://docs.ansible.com/ansible/tower.html)。Tower提供了一个健壮的数据库记录日志的功能，这样就可以随时通过图形界面或者REST API 来查看主机，项目，特殊的列表的日志。\n","date":"2015-11-10"},{"title":"Vagrant & Ansible 快速入门教程","tags":["Ansible","Translate","Vagrant","backend"],"iso8601Date":"2015-11-08T08:39:10+08:00","basename":"Vagrant-Ansible-快速入门教程","body":"\n\n[原文地址](https://adamcod.es/2014/09/23/vagrant-ansible-quickstart-tutorial.html)  \n\n就个人而言，我用过Chef，Puppet，简单的Bash脚本等用来配置服务器，其他服务和Vagrant Boxes。虽然Chef社区仍然在快速成长，但是我发布的关于[Chef](https://adamcod.es/2013/01/15/vagrant-is-easy-chef-is-hard-part2.html)的文章仍然是最受欢迎的文章。然而，两个月之前，当我在一个项目中使用Ansible的时候所有的事情都变了。从此之后我再也没用过其他的配置工具，也找不到用其他工具的理由了。  \n\n看过了不少关于Ansible的教程，尝试这从中找出相应的模式和最佳实战，然而似乎在知识上有巨大的横沟。你可以用Ansible做很多事情，你也可以同时学习如何使用，但是跟我最新学习的工具一样，却反一个很简单地方入手学习的地方。今天我希望通过使用Vagrant和Ansible配置一个LAMP的技术栈来纠正他。  \n\n## 为什么使用Ansible\n\nAnsible和其他的配置管理工具最主要的区别就是Ansible是基于SSH的。Chef和Puppet都是有依赖的，而且必须在服务器上安装之后才能使用，而Ansible则不需要。它可以在你本机运行，使用SSH连接相应主机，在其运行相应命令。  \n\n为什么不直接使用Bash脚本呢？Ansible之所以比Bash脚本好是因为他简单。Ansible只是运行了一系列使用YAML格式编写的任务。同样Ansible还具有幂等性，这就意味着你可以多次运行同样的任务，并且这些任务的输入会保持一致（例如除非明确要求运行两次否则它不会对同一个任务运行两次）。同样这个可以通过Bash脚本编写，但是会很复杂。\n\n## Ansible 和 Vagrant\n\n首先给你要确定已经安装了Ansible和Vagrant。它们的安装文档可以在它们的相关网站找到，它们都很容易安装的。\n\n## 基础\n\n我们将会创建一个新的文件夹来开始我们的项目。\n\n```bash\nmkdir -p ~/Projects/vagrant-ansible\ncd ~/Projects/vagrant-ansible\n```\n\n接着我们创建一个基于最新的Ubuntu的Vagrantfile。\n\n```bash\nvagrant init ubuntu/trusty64\n```\n\n运行完这个命令后在项目目录下会有一个叫`Vagrantfile`的文件。它包含了你想要配置的关于box的一些基本信息和一堆你现在不需要管的注释。删除所有的注释，你就会简单的得到以下的代码：\n\n```bash\nVAGRANTFILE_API_VERSION = \"2\"\nVagrant.configure(VAGRANTFILE_API_VERSION) do |config|\n  config.vm.box = \"ubuntu/trusty64\"\nend\n```\n\n我们需要在他配置好的适合访问服务器，所以我们将会吧Vagrant的80端口转发到本机的8080端口，将以下代码添加到`end`之前。\n\n```bash\nconfig.vm.network \"forworded_port\", guest: 80, host:8080\n```\n\n现在Vagrant只需要配置一件事情。我们需要配置Vagrant使用Ansible作为配置器，并且知道去哪里需找这些命令。为了实现这个目的，我们将一下代码加到`Vagrantfile`的`end`之前。\n\n```bash\nconfig.vm.provision :ansible do |ansible|\n  ansible.playbook = \"playbook.yml\"\nend\n```\n\n以上所有的任务完成之后你的`Vagrantfile`将会是一下的配置。  \n\n```bash\nVAGRANTFILE_API_VERSION = \"2\"\n\nVagrant.configure(VAGRANTFILE_API_VERSION) do |config|\n  config.vm.box = \"ubuntu/trusty64\"\n\n  config.vm.network \"forwarded_port\", guest: 80, host: 8080\n\n  config.vm.provision :ansible do |ansible|\n    ansible.playbook = \"playbook.yml\"\n  end\nend\n```\n\n## 基本术语\n\nAnsible再你的服务器上运行一系列的*Tasks*。把Task想象成一个单一的Bash命令。接着是*playbook*，Ansible通过Playbook得知将再服务器上运行什么任务。每一个Task运行一个Ansible的*Module*，Module是Ansible内建的各种命令，例如yun，创建用户等。稍后就会明白这些术语的具体意思。  \n\n## 第一个Playbook\n\n创建一个叫`playbook.yml`的文件，这个名字必须和`Vagrantfile`的`ansible.playbook`相同。\n\n所有Ansible的Playbook都必须是YAML格式的。传统上YAML文件是以三条横线开头的，但是Ansible并不是强制要求的，不过社区仍然会遵循这个规则。  \n\n新建的playbook是一个YAML的列表。这个列表应该包括要管理的host和各种要运行的task，将以下代码添加到`playbook.yml`文件中。\n\n```bash\n---\n- host: all\n  sudo: true\n  tasks:\n```\n\n我们使用Vagrant并且只有一台主机，所以我们可以使用一个魔法值`all`，意思是在所有的机器上运行任务。然后我们告诉Ansible运行是需要sudo权限，最后我们添加了 `tasks:` 用来添加Task。\n\n要安装LAMP技术栈的基本步骤是：  \n1. 更新 Apt Cache\n2. 安装 Apache\n3. 安装 MySQL\n4. 安装 PHP\n\n这就是所有我们必须的步骤。因为我们用的是Ubuntu的box，所有我们需要Ansible的apt模块。\n\n首先我们给每一个task一个`name:`，这个可以是任何描述，它用来描述这个任务，如下:\n\n```bash\n- name: this should be some descriptive text\n```\n\n接着我们指定一个Ansible的模块作为值，在本例中使用的是apt模块。\n\n```bash\napt\n```\n\n紧随其后的是一些`key=value`的由空格分隔的键值对。选择你想要传递给Ansible的键值对，可以通过Ansible的文档来查询所需要的键值对。\n\n安装Apache的任务如下：\n\n```bash\n- name: install apache\n  apt: name=apache2 state=present\n```\n\n这样就配置好了，很简单，对吧。我们将继续添加MySQL和PHP的Task到`playbook.yml`中，最后代码如下：\n\n```bash\n---\n- hosts: all\n  sudo: true\n  tasks:\n    - name: update apt cache\n      apt: update_cache=yes\n    - name: install apache\n      apt: name=apache2 state=present\n    - name: install mysql\n      apt: name=mysql-server state=present\n    - name: install php\n      apt: name=php5 state=present\n```\n\n现在我们已经配置完了，然后运行`vagrant up`，你将会看到如下图所示：\n![result](https://adamcod.es/img/posts/vagrant-ansible-lamp.gif)  \n\n这样就搭建好了。如果你想让LAMP运行起来，你就可以ssh到Vagrant，然后将`info.php`文件添加到`/var/www/html`下。\n```php\n<?php phpinfo();?>\n```\n\n然后在本机浏览器打开[http://localhost:8080/info.php](http://localhost:8080/info.php)，就会看到你想要看到的。\n\n**翻译到此，剩下的就是关于Ansible的使用了，这些可以通过Ansible的官方文档来学习**\n\n","date":"2015-11-08"},{"title":"Vagrant 入门指南","tags":["Vagrant","Translate","backend"],"iso8601Date":"2015-11-07T00:49:47+08:00","basename":"Vagrant-入门指南","body":"\n[原文地址](https://docs.vagrantup.com/v2/getting-started/index.html)\n## 开始\n\nVagrant 入门指南将会引导你完成你的第一个Vagrant项目，并且会向你展示Vagrant提供的基本的特色功能。  \n如果你好奇Vagrant提供了什么好的功能，你可以阅读一下[Why Vagrant](https://docs.vagrantup.com/v2/why-vagrant/)。  \n这篇入门指南将会基于[VirtualBox][1]来使用Vagrant，因为它免费，支持主流平台，并且Vagrant内建支持。当你完成这篇指南的时候，可以参考更多的[提供商](https://docs.vagrantup.com/v2/getting-started/providers.html)\n\n> 更喜欢读书？如果你更喜欢读实体书，那么你可能对由Vagrant作者编写，O'Reilly 出版的[Vagrant: Up and Running](http://www.amazon.com/gp/product/1449335837/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1449335837&linkCode=as2&tag=vagrant-20) 更感兴趣，\n\n## 启动运行\n\n```bash\n$ vagrant init hashicorp/precise32\n$ vagrant up\n```\n\n运行了上面两个命令之后，会得到一个运行在[VirtualBox][1]虚拟机上的Ubuntu 12.04 LTS 32-bit。你可以通过`vagrant ssh` 以ssh的方式登陆，当你王城所有的操作的时候，也可以使用`vagrant destory`来删除所有的痕迹。  \n现在想象 一下，以前你所有工作过的项目，都可以通过这个简单的方式来设置了。    \n通过使用Vagrant,对于任何项目来说`vagrant up` 是你唯一需要你用到的命令，例如，安装项目依赖，设置网络和同步文件夹，仍然可以很舒服的使用本机系统。    \n指南剩下的内容将会引导你设置更复杂的项目，涵盖跟多的Vagrant的特色。  \n\n## 项目配置\n\n 任何Vagrant项目配置的第一步都是创建一个[Vagrantfile](https://docs.vagrantup.com/v2/vagrantfile/)。该文件的作用有两个:  \n1. 指定项目的根目录。很多Vagrant的配置跟这个目录有关。  \n2. 描述项目所需要的机器类型和资源，以及如何安装软件，如何访问。  \n\n Vagrant 有一个内建的命令`vagrant init`用来初始化项目。出于本指南的目的，请在终端输入一下命令  \n\n```bash\n$ mkdir vagrant_getting_started\n$ cd vagrant_getting_started\n$ vagrant init\n```\n\n 以上命令将在你的当前目录下创建`Vagrantfile`。查看Vagrantfile会发现里面有各种注释和示例。不要因为他负责而感到恐惧，我们很快就能够修改它了。  \n 同样也可以在一个已存在的目录下运行`vagrant init`，来未一个已有项目设置Vagrant环境。\n 如果你使用版本控制工具，那么Vagrantfile可以提交到版本库中。这样其他与这个项目相关的人就可以无需前期工作了。\n\n## Boxes\n\n 由于从头构建一个虚拟机是一个费时的过程，所以Vagrant使用一个基本镜像来快速克隆一个虚拟机。这些基本镜像再Vagrant中被称作boxes，而且在创建玩Vagrantfile后的第一步就是为你的Vagrant环境指定一个box。  \n\n###  安装box\n\n 如果你运行了[开始指南](https://docs.vagrantup.com/v2/getting-started/)的命令，那么你已经在本机安装了一个box，你就不需要再次运行一下命令了。但是这部分仍然是值得阅读的，这样你就可以了解更多关于如何管理box的知识。  \n Boxes 由Vagrant的`vagrant box add`命令添加。这个将box存储在一个指定命名的目录下，这个多个Vagrant的环境可以重复利用。如果你还未添加已给box，那么可以运行一下命令。  \n\n```bash\n$ vagrant box add hashicorp/precise32\n```\n\n 这个将从[HashiCorp's Atlas box catalog](https://atlas.hashicorp.com/boxes/search)下载一个名字为`hashicorp/precise32`的box。你可以从HashiCorp's Atlas box catalog中找到各种box。很容易从HashiCorp's Atlas 下载镜像，同时你也可以通过本地文件，其他URL等添加。\n 已添加的boxes可以被多个环境重复利用。每个环境都是将其作为基础镜像克隆，而不会修改他。这就意味着两个环境同时使用了刚刚添加的`hashicorp/precise32`的box，其中一个主机添加文件并不会影响另一个主机。  \n\n### 使用box\n\n 现在已经吧box添加到Vagrant了，我们就可以把他作为一个基础镜像使用了。打开Vagrantfile，修改一下代码:\n\n```bash\nVagrant.configure(\"2\") do |config|\n  config.vm.box = \"hashicorp/precise32\"\nend\n```\n 在这个例子中，\"hashicorp/precise32\" 的名字必须跟你add box的名字相同。这是Vagrant知道box如何用的方式。如果这个box没有被安装过，那么Vagrant将会自动下载并且当它运行的时候自动添加。  \n 在下一节中我们将启动Vagrant并且与其进行交互。  \n\n### 寻找更多box\n\n 在本入门指南的后半部分，我们只会使用之前添加的\"hashicorp/precise32\"的box。但是，结束本指南的时候你的第一个问题可能就是我从南找到更多的box。  \n 寻找更多box的最好的地方是[HashiCorp's Atlas box catalog](https://atlas.hashicorp.com/boxes/search)。HashiCopr 的Altas有一个公共目录，在目录里可以找到各种免费的，可以运行各种平台和技术的box。  \n HashiCorp的Altas同样也有一个很棒的搜索功能，这样就可以更方便的找到需要的box。  \n 除了寻找免费的box外，HashiCorp的Altas还允许你构建自己的box，以及如果你想为自己的组织创建私有box。  \n\n## 启动并且SSH登陆\n\n 是时候启动你第一个Vagrant环境了。运行一下命令:  \n\n```bash\nvagrant up\n```\n\n 1分钟之内，这个命令运行完后，你就可以得到一个运行Ubuntu的虚拟机了。由于Vagrant运行虚拟机的时候没有UI，所以你不会看到任何输出。你可以SSH登陆到虚拟机来验证虚拟机是否运行：\n\n```bash\nvagrant ssh\n```\n\n 运行完这个命令后你就会进入ssh会话中。继续和机器交互，做任何你想做的事情。虽然是临时的虚拟机，但是还是要小心`rm -rf /` 这种命令，因为Vagrant的`/vagrant`目录与宿主机器共享了包含Vagrantfile的目录，如果运行了会删除所有的文件的。共享目录将会在下节描述。  \n 花一点时间思考一下刚刚发生的事情：通过仅仅1行配置和1行命令，我们就启动了一个功能完整的，可以ssh登陆的虚拟机，太酷了。  \n 当你用完虚拟机的时候，你可以在主机上使用`vagrant destory`来清除你再虚拟机的痕迹。\n\n## 同步文件夹\n\n虽然这么容易就可以启动一个虚拟机是很爽，但是并不是所有的人都喜欢通过ssh登陆终端修改文件。幸运的是，通过Vagrant，你并不是必须这么做的。通过使用*同步文件夹*Vagrant将会自动的将文件从虚拟机同步或者同步到虚拟机中。  \n 默认情况下，Vagrant是共享你的项目目录（记住，这个是你Vagrantfile所在的目录）到虚拟机的`/vagrant`的。再次运行`vagrant up` 并且ssh到虚拟机。\n\n```bash\n$ vagrant up\n...\n$ vagrant ssh\n...\nvagrant@precise32:~$ ls /vagrant\nVagrantfile\n```\n\n 不管相不相信，在虚拟机的这个Vagrantfile和再宿主机上的那个Vagrantfile是同一个。继续创建一个文件证明一下：\n\n```bash\nvagrant@precise32:~$ touch /vagrant/foo\nvagrant@precise32:~$ exit\n$ ls\nfoo Vagrantfile\n```\n\n 哇！`foo`已经在你的宿主机里创建了。正如你所见，Vagrant会保持那个文件夹的同步。  \n 通过使用[同步文件夹](https://docs.vagrantup.com/v2/synced-folders/)，你可以继续在你的主机上使用你喜欢的编辑器，文件会自动的同步到虚拟机上的。\n\n## 配置\n\n 现在我们已经在虚拟机上运行了一份Ubuntu的拷贝，并且我们还可以从宿主机上编辑文件同时同步到虚拟机中。现在让我们通过webserver来提供这些文件。  \n 我们可以SSH到虚拟机然后安装webserver然后提供这些文件，但是这样做，每一个用Vagrant的用户都需要重复相同的事情。不过Vagrant内建提供了自动配置的功能。使用这个功能，Vagrant可以在你`vagrant up`的时候自动安装软件，这样虚拟机就可以被重复创建并且可以直接使用了。  \n\n### 安装Apache\n\n 对于我们的项目来说可以仅仅使用[Apache](http://httpd.apache.org/)，并且我们是通过一个shell脚本创建的。再Vagrantfile相同的目录下创建一个名字为`bootstrap.sh`的文件。  \n\n```bash\n#!/usr/bin/env bash\n\napt-get update\napt-get install -y apache2\nif ! [ -L /var/www ]; then\n  rm -rf /var/www\n  ln -fs /vagrant /var/www\nfi \n```\n\n 然后，我们需要配置Vagrant，让它在启动的时候运行这个脚本。我们通过修改Vagrantfile来实现这一功能，具体修改如下:\n\n```\nVagrant.configure(\"2\") do |config|\n  config.vm.box = \"hashicorp/precise32\"\n  config.vm.provision :shell, path: \"bootstrap.sh\"\nend\n```\n\n “provision”这一行是新添加的，告诉Vagrant使用`shell`配置器运行`bootstrap.sh`脚本启动机器。脚本的路径是项目更目录的相对路径。\n\n### 配置\n\n 在所有的事情都配置好好，运行`vagrant up`来创建机器，Vagrant将会自动的配置它。运行的时候你会在终端看到shell脚本的输出。如果虚拟机已经开始运行了，运行`vagrant reload --provision`, 这个命令可以快速重启虚拟机并且跳过初始的导入步骤。`--provision`表示Vagrant需要运行配置，因为通常Vagrant只运行第一步。\n 当Vagrant完全运行起来的时候，web server同时也启动了。现在还不都能通过宿主机的浏览器看到，但是可以通过ssh到虚拟机进行验证。\n\n```\n$ vagrant ssh\n...\nvagrant@precise32:~$ wget -qO- 127.0.0.1\n```\n\n 这个可以运行成功，因为我们我们已经安装了Apache服务器并且设置默认的`DocumentRoot`指向了`/vagrant`。\n 你可以继续的创建文件，同时再终端里面验证，不过下一节我们将会讲述网络的相关知识，这样你就可以再本机的浏览器验证了。\n\n## 网络\n\n 目前为止我们运行了一个web server，并且可以再宿主机器上修改，同时自动同步到虚拟机中。然而，简单的从虚拟机的终端访问网页并不方便。在这一节中我们将使用Vagrant的网络特性，这样就可以方便的从宿主机器访问虚拟机了。\n\n### 端口转发\n\n 一个方法是使用端口转发功能。端口转发允许你指定虚拟机的一个端口跟宿主机的一个端口共享。这样你就可以在宿主机访问宿主机的端口，但是都会转发到虚拟机中。\n 现在我们配置端口来访问虚拟机的Apache服务。修改Vagrantfile如下：\n\n```\nVagrant.configure(\"2\") do |config|\n  config.vm.box = \"hashicorp/precise32\"\n  config.vm.provision :shell, path: \"bootstrap.sh\"\n  config.vm.network :forwarded_port, guest: 80, host: 4567\nend\n```\n\n 运行`vagrant reload`，或者如果没有启动过虚拟机运行`vagrant up`。使配置生效。\n\n### 其他的网络配置\n\n Vagrant也有其他的网络配置，允许你给虚拟机配置固定ip，或者是桥接两台虚拟机。如果你对其感兴趣，可以阅读[networking](https://docs.vagrantup.com/v2/networking/)章节。\n\n## 共享\n\n 现在我们已经有了一台可运行的服务器，并且可以从本机直接访问，我们构建了一个相当实用的开发环境。但是，除了提供一个开发环境，Vagrant还可以很容易的和其他环境分享和合作。这个主要的功能叫做[Vagrant Share](https://docs.vagrantup.com/v2/share/)。\n Vagrant Share运行你把你的Vagrant环境分享你世界上的每一个人。它将分配给你一个URL，这样世界上任何一台机器都可以实用你的环境了。\n\n### 登录Harshicorp's Altas\n\n 在分享你的Vagrant环境之前，你需要一个[HashiCorp's Altas](https://atlas.hashicorp.com/)的账号。不必担心，它是免费的。\n 当你有了账号后，你就可以使用`vagrant login`来登陆\n\n```\n$ vagrant login\nUsername or Email: mitchellh\nPassword (will be hidden):\nYou're now logged in!\n```\n\n### 共享\n\n 当你登录之后，你就可以使用`vagrant share`来共享环境了。\n\n```\n$ vagrant share\n...\n==> default: Your Vagrant Share is running!\n==> default: URL: http://frosty-weasel-0857.vagrantshare.com\n...\n```\n\n 你的URL会是不同的，无需上面的URL。复制上面`vagrant share`生成的url到你的浏览器，你会看到我们已经做好的Apache的页面。\n 如果你在共享目录中改动了某个文件，重新刷新URL，你会看到已经更新了。这个URL直接路由到你的Vagrant环境，并且可以直接再世界上任何一台联网的机器上访问。\n 关闭共享只需要使用`Ctrl+C`即可，重新刷新URL，你会发现你的环境已经不再被共享了。\n Vagrant Share比简单的HTTP share 更强大，想要了解更多可以阅读完整的[Vagrant Share](https://docs.vagrantup.com/v2/share/)文档。\n\n## 关闭\n\n 现在我们已经有一个开发web的基本环境。但是，现在是时候说一下开关了，可能是在运行其他的项目的时候使用，或者是吃午饭的时候使用，或者只是回家的时候。我们应该如何清理我们的开发环境。\n 通过Vagrant，我们可以*suspend*,*halt*或者*destory*虚拟机。每一个都有他们的优缺点，选择最适合你的那个。  \n* **suspend** 使用`vagrant suspend`命令，保存当前运行环境并停止。当你想要继续运行的时候可以使用`vagrant up`命令，它会从你上次suspend中恢复。这个命令主要好处是速度非常快，通常关闭，启动都在5到10秒之间。缺点是虚拟机仍然会使用你的硬盘，并且在存储所有的状态的时候需要更大的硬盘。  \n* **halting** 使用`vagrant halt`命令实现优雅的关闭虚拟机的操作系统并关闭虚拟机。在你想要使用的时候再次运行`vagrant up`命令启动。这个的好处是可以完全的关闭虚拟机并保留使用的硬盘资源，再下次启动的时候会是一个干净的虚拟机。缺点是冷启动的时候会慢一点，并且仍然会使用硬盘空间。\n* **destory** 使用`vagrant destory`命令，将会清楚虚拟机所有的痕迹。它将会停止操作系统，关闭虚拟机，并且清除所使用的磁盘空间。下次使用`vagrant up`的时候会出现问题。好处是不会有任何的残留在你机器上，同事磁盘空间和RAM都会还给本机。坏处是`vagrant up`将会从头开始，这样会花费更长的时间。\n\n## 重新构建\n\n 当你想重新使用虚拟机的时候，不管是是明天，一周之后，或者是一年之后，都可以通过`vagrant up`来轻松运行他。\n 只需要这样。而且由于你的Vagrant都再Vagrantfile里面配置的，所有你或者你的同事只需要简单的运行`vagrant up`即可重新创建相同的环境。\n\n### Provider\n\n 在本指南开始的时候，我们的项目一直支持[VirtualBox][1]。但是Vagrant可以与多个后端Provider一起使用，例如[VMware](https://docs.vagrantup.com/v2/vmware/),[AWS](http://github.com/mitchellh/vagrant-aws)等。继续阅读来了解如何它们的更多信息以及如何使用它们。\n 当你安装了其他的Provider的时候,你不需要更改你的Vagrantfile，只需要在启动的时候加个参数即可：\n\n```\n$ vagrant up --provider=vmware_fusion\n```\n\n准备转移到云端了？使用AWS：\n\n```\n$ vagrant up --provider=aws\n```\n\n 当你使用其他Provider运行`vagrant up`的时候，其他的Vagrant命令不行也要指定Provider。Vagrant将会自动的计算出来。所以当你ssh,destory的或者运行其他命令的时候，只需要输入平时的命令即可，例如：`vagrant destory`，无需额外的参数。\n 更多信息请参考[provider](https://docs.vagrantup.com/v2/providers/)。\n[1]: https://www.virtualbox.org/\n\n\n","date":"2015-11-07"}]}}