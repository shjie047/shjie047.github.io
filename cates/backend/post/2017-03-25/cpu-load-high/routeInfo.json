{"path":"cates/backend/post/2017-03-25/cpu-load-high","templateID":4,"sharedPropsHashes":{"tags":"1C8cqm"},"localProps":{"post":{"title":"Linux 如何查找Java 程序CPU负载过高","cover":"https://p6jqy6mfr.bkt.clouddn.com/stock-photo-250406255.jpg","iso8601Date":"2017-03-25T19:20:26+08:00","basename":"cpu-load-high","tags":["CPU","Java","Linux","Backend"],"date":"2017-03-25","cate":"backend","summary":"准备程序：\n\n`Java\npackage test;\n\npublic class Test{\n    public static void main(String[] args){\n        new Thread(new Runnable(){\n            public void run(){\n                while(true){\n\n            }\n        }\n    }).start();\n}\n\n}\n\n其中一个线程回导致一直占用CPU，编译运行。通过top 获取CPU占用信息\n![top cpu](https://raw.githubusercontent.com/mashuai/hexo-blog/master/images/top.png)\n可以看到占用最高的 pid是 25955\n通过top -p 25955 -H 获取进程内部线程的CPU使用率。\n![topph](https://raw.githubusercontent.com/mashuai/hexo-blog/master/images/tophp.png)\n可以发现占用最高的线程ID是 25965 将其转换为16进制python -c &#39;print hex(25965)&#39; 得到的值是0x656d \n使用 jstack -l 25955 &gt; jstack.log 得到Java进程的Thread dump，通过 grep -i 0x656d -A 30 jstack.log` 获取Java Thread id为0x656d的线程的thread dump。\n\n然后就可以定位相应代码查找代码占用CPU过高问题。","readingtime":2,"url":"/cates/backend/post/2017-03-25/cpu-load-high","dirs":["java"],"relatives":[{"url":"/cates/backend/post/2018-04-06/java8-date-time-api","title":"Java8 Date Time API"}],"body":"\n\n\n准备程序：\n\n```Java\npackage test;\n\npublic class Test{\n    public static void main(String[] args){\n        new Thread(new Runnable(){\n            public void run(){\n                while(true){\n\n                }\n            }\n        }).start();\n    }\n}\n```\n其中一个线程回导致一直占用CPU，编译运行。通过`top` 获取CPU占用信息\n![top cpu](https://raw.githubusercontent.com/mashuai/hexo-blog/master/images/top.png)\n可以看到占用最高的 pid是 25955\n通过`top -p 25955 -H` 获取进程内部线程的CPU使用率。\n![topph](https://raw.githubusercontent.com/mashuai/hexo-blog/master/images/tophp.png)\n可以发现占用最高的线程ID是 `25965` 将其转换为16进制`python -c 'print hex(25965)'` 得到的值是`0x656d` \n使用 `jstack -l 25955 > jstack.log` 得到Java进程的Thread dump，通过 `grep -i 0x656d -A 30 jstack.log` 获取Java Thread id为0x656d的线程的thread dump。\n![jstack](https://raw.githubusercontent.com/mashuai/hexo-blog/master/images/jstack.png)\n然后就可以定位相应代码查找代码占用CPU过高问题。\n"}}}