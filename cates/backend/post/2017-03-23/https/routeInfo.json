{"path":"cates/backend/post/2017-03-23/https","templateID":1,"sharedPropsHashes":{"tags":"1C8cqm"},"localProps":{"post":{"title":"OKHttp https","cover":"http://p6jqy6mfr.bkt.clouddn.com/stock-photo-120709477.jpg","iso8601Date":"2017-03-23T21:32:29+08:00","basename":"https","tags":["Translate","Java","OKHttp","HTTP","Backend"],"date":"2017-03-23","cate":"backend","summary":"原文链接\n\nOKHttp尝试平衡两个相互矛盾的内容：\n  连接尽可能多的主机。包括使用boringssl的高级的主机和一些使用openssl的过时的主机。\n  连接的安全性。包括验证远程主机的证书，通过强密码进行数据交换。\n\n协商连接到HTTPS的时候，OKHttp需要知道需要提供的TLS版本和密码套件。如果一个客户端需要最大化链接就需要包含过时的TLS版本和弱设计的密码组合。一个严格的客户端想要最大化安全就需要只包含最新的TLS版本和强密码套件。\n安全和连接规范具体是由ConnectionSpec实现的。OKHttp包含三个内置的规范：\n  MODERN_TLS 是连接现代HTTPS服务器的配置。\n  COMPATIBLE_TLS 是连接非现代，但安全的HTTPS服务器的配置。\n * CLEARTEXT 是非安全的http的配置。\n\n默认OKHttp会尝试使用MODERN_TLS连接，如果现代配置失败，回到使用COMPATIBLE_TLS配置。\nTLS版本和密码套件在任一一个发布版本的人一个规范中都可能改变。例如，在OKHttp2.2，因为POODLE攻击就移除了SSL 3.0的支持。在OKHttp 3.0，移除了RC4的支持。同桌面浏览器一样，使用罪行的OKHttp版本可以获得最好的安全保障。\n也可以根据一组定制的TLS 版本和密码套件构建自己的规范。例如，下面这个配置要求使用三组高强度的密码套件。它的缺点就是必须是Android5.0+或者是最新的浏览器。\n`Java\nConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERNTLS)    .tlsVersions(TlsVersion.TLS12)\n    .cipherSuites(\n          CipherSuite.TLSECDHEECDSAWITHAES128GCMSHA256,\n          CipherSuite.TLSECDHERSAWITHAES128GCMSHA256,\n          CipherSuite.TLSDHERSAWITHAES128GCMSHA256)\n    .build();\n\nOkHttpClient client = new OkHttpClient.Builder() \n    .connectionSpecs(Collections.singletonList(spec))\n    .build();\n`\n\n证书锁定\n\n默认情况下OKHttp信任主机平台的证书颁发机构。这个策略可以最大化连接，但是也有可能收到权威证书攻击，例如2011 DigiNotar attack。同样也假设你的证书是权威机构颁发的。\n使用CertificatePinner限制了哪些证书和证书颁发机构值得信任。使用证书锁定可以提高安全性，但是限制了服务端团队升级他们的TLS证书。在没的到服务端团队的许可的时候不要使用证书锁定。\n`Java\n  public CertificatePinning() {\n    client = new OkHttpClient.Builder()\n        .certificatePinner(new CertificatePinner.Builder()\n            .add(&quot;publicobject.com&quot;, &quot;sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=&quot;)\n            .build())\n        .build();\n  }\n\n  public void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(&quot;https://publicobject.com/robots.txt&quot;)\n        .build();\n\nResponse response = client.newCall(request).execute();\nif (!response.isSuccessful()) throw new IOException(&quot;Unexpected code &quot; + response);\n\nfor (Certificate certificate : response.handshake().peerCertificates()) {\n  System.out.println(CertificatePinner.pin(certificate));\n}\n\n  }\n`\n\n定制信任证书\n\n下面所有的代码展示了如何使用你自己的配置代替服务端的证书配置。正如上述所言，**在没的到服务端团队的许可的时候不要使用定制证书*。\n`Java\n  private final OkHttpClient client;\n\n  public CustomTrust() {\n    SSLContext sslContext = sslContextForTrustedCertificates(trustedCertificatesInputStream());\n    client = new OkHttpClient.Builder()\n        .sslSocketFactory(sslContext.getSocketFactory())\n        .build();\n  }\n\n  public void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(&quot;https://publicobject.com/helloworld.txt&quot;)\n        .build();\n\nResponse response = client.newCall(request).execute();\nSystem.out.println(response.body().string());\n\n  }\n\n  private InputStream trustedCertificatesInputStream() {\n    ... // Full source omitted. See sample.\n  }\n\n  public SSLContext sslContextForTrustedCertificates(InputStream in) {\n    ... // Full source omitted. See sample.\n  }\n`","readingtime":5,"url":"/cates/backend/post/2017-03-23/https","dirs":["okhttp"],"relatives":[{"url":"/cates/backend/post/2017-03-19/Recipes","title":"OKHttp Recipes"},{"url":"/cates/backend/post/2017-03-18/calls","title":"OKHttp的调用"},{"url":"/cates/backend/post/2017-03-19/connections","title":"OKHttp connections"},{"url":"/cates/backend/post/2017-03-19/interceptors","title":"OKHttp 拦截器"}],"body":"\n\n[原文链接](https://github.com/square/okhttp/wiki/HTTPS)\n\nOKHttp尝试平衡两个相互矛盾的内容：\n * 连接尽可能多的主机。包括使用[boringssl](https://boringssl.googlesource.com/boringssl/)的高级的主机和一些使用[openssl](https://www.openssl.org/)的过时的主机。\n * 连接的安全性。包括验证远程主机的证书，通过强密码进行数据交换。\n\n协商连接到HTTPS的时候，OKHttp需要知道需要提供的[TLS版本](http://square.github.io/okhttp/3.x/okhttp/okhttp3/TlsVersion.html)和[密码套件](http://square.github.io/okhttp/3.x/okhttp/okhttp3/CipherSuite.html)。如果一个客户端需要最大化链接就需要包含过时的TLS版本和弱设计的密码组合。一个严格的客户端想要最大化安全就需要只包含最新的TLS版本和强密码套件。\n安全和连接规范具体是由[ConnectionSpec](http://square.github.io/okhttp/3.x/okhttp/okhttp3/ConnectionSpec.html)实现的。OKHttp包含三个内置的规范：\n * `MODERN_TLS` 是连接现代HTTPS服务器的配置。\n * `COMPATIBLE_TLS` 是连接非现代，但安全的HTTPS服务器的配置。\n * `CLEARTEXT` 是非安全的http的配置。\n\n默认OKHttp会尝试使用`MODERN_TLS`连接，如果现代配置失败，回到使用`COMPATIBLE_TLS`配置。\nTLS版本和密码套件在任一一个发布版本的人一个规范中都可能改变。例如，在OKHttp2.2，因为[POODLE](http://googleonlinesecurity.blogspot.ca/2014/10/this-poodle-bites-exploiting-ssl-30.html)攻击就移除了SSL 3.0的支持。在OKHttp 3.0，移除了[RC4](http://en.wikipedia.org/wiki/RC4#Security)的支持。同桌面浏览器一样，使用罪行的OKHttp版本可以获得最好的安全保障。\n也可以根据一组定制的TLS 版本和密码套件构建自己的规范。例如，下面这个配置要求使用三组高强度的密码套件。它的缺点就是必须是Android5.0+或者是最新的浏览器。\n```Java\nConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)  \n    .tlsVersions(TlsVersion.TLS_1_2)\n    .cipherSuites(\n          CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,\n          CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,\n          CipherSuite.TLS_DHE_RSA_WITH_AES_128_GCM_SHA256)\n    .build();\n\nOkHttpClient client = new OkHttpClient.Builder() \n    .connectionSpecs(Collections.singletonList(spec))\n    .build();\n```\n#### 证书锁定\n默认情况下OKHttp信任主机平台的证书颁发机构。这个策略可以最大化连接，但是也有可能收到权威证书攻击，例如[2011 DigiNotar attack](http://www.computerworld.com/article/2510951/cybercrime-hacking/hackers-spied-on-300-000-iranians-using-fake-google-certificate.html)。同样也假设你的证书是权威机构颁发的。\n使用[CertificatePinner](http://square.github.io/okhttp/3.x/okhttp/okhttp3/CertificatePinner.html)限制了哪些证书和证书颁发机构值得信任。使用证书锁定可以提高安全性，但是限制了服务端团队升级他们的TLS证书。**在没的到服务端团队的许可的时候不要使用证书锁定**。\n```Java\n  public CertificatePinning() {\n    client = new OkHttpClient.Builder()\n        .certificatePinner(new CertificatePinner.Builder()\n            .add(\"publicobject.com\", \"sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=\")\n            .build())\n        .build();\n  }\n\n  public void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"https://publicobject.com/robots.txt\")\n        .build();\n\n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n    for (Certificate certificate : response.handshake().peerCertificates()) {\n      System.out.println(CertificatePinner.pin(certificate));\n    }\n  }\n```\n#### 定制信任证书\n下面所有的代码展示了如何使用你自己的配置代替服务端的证书配置。正如上述所言，**在没的到服务端团队的许可的时候不要使用定制证书*。\n```Java\n  private final OkHttpClient client;\n\n  public CustomTrust() {\n    SSLContext sslContext = sslContextForTrustedCertificates(trustedCertificatesInputStream());\n    client = new OkHttpClient.Builder()\n        .sslSocketFactory(sslContext.getSocketFactory())\n        .build();\n  }\n\n  public void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"https://publicobject.com/helloworld.txt\")\n        .build();\n\n    Response response = client.newCall(request).execute();\n    System.out.println(response.body().string());\n  }\n\n  private InputStream trustedCertificatesInputStream() {\n    ... // Full source omitted. See sample.\n  }\n\n  public SSLContext sslContextForTrustedCertificates(InputStream in) {\n    ... // Full source omitted. See sample.\n  }\n```\n"}}}