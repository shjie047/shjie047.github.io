{"path":"tags/mobile","templateID":3,"sharedPropsHashes":{},"localProps":{"posts":[{"author":"Wm Leler","title":"为什么Flutter选择Dart ?","from":"https://hackernoon.com/why-flutter-uses-dart-dd635a054ebf","tags":["Dartlang","Dart","Flutter","Mobile","Programming Language","跨平台","移动端"],"iso8601Date":"2018-01-26T08:00:00+08:00","basename":"why-flutter-uses-dart","body":"\n\n很多语言学家坚信自然语言影响着人类思考的方式。那么这种情况对计算机语言成立吗？程序员使用不同的编程语言处理问题时常常会采用完全不同的解决方法。更极端一点的例子，计算机科学家为了鼓励结构化编程而移除了*goto*语句。\n\n那么这些跟[Flutter](https://flutter.io/)和[Dart](https://www.dartlang.org/)有什么关系呢？其实关系很大。早期的Flutter团队评估了大量编程语言，选择Dart的原因是它与团队创建用户界面的方式相匹配。\n\nDart是开发者喜爱Flutter的一个重要原因。正如一条微博所说：\n\n![](pic_01.jpeg)\n\n这里有一个Dart特性的快速列表，这些特性一起使Dart对于Flutter变得不可或缺：\n\n* Dart被AOT([Ahead Of Time](https://en.wikipedia.org/wiki/Ahead-of-time_compilation))编译为快速的、可预测的本地代码(navtive code)，这种编译方式使得几乎所有的Flutter代码都可以用Dart来编写。这样不仅使Flutter快速，而且几乎可以定制所有的模块（包括全部的组件）。\n\n* Dart还可以被[JIT](https://en.wikipedia.org/wiki/Just-in-time_compilation)编译，以应对极其快节奏的开发周期和易变的工作流程（包括Flutter受欢迎的毫秒级的、状态驱动的hot reload）\n\n* Dart可以轻易地创建以60fps运行的流畅的动画和变换。Dart不需要锁就可以处理对象分配和垃圾回收。和Javascript类似，Dart避免[抢占式调度](https://en.wikipedia.org/wiki/Preemption_(computing))和共享内存（因此带来的锁）。因为Flutter应用被编译为本地代码，所以Flutter不需要场景下的低速bridge（比如：Javascript和本地代码）。同时启动也更快。\n\n* Dart让Flutter避免使用独立的声明式的布局语言，像[JSX](https://en.wikipedia.org/wiki/React_(JavaScript_library)#JSX)或XML，或者视可视化界面构建器，因为Dart的声明式、可编程的布局易于阅读和呈现。在一个地方用一种语言书写所有的布局，让Flutter提供更先进的制作布局的工具变得易如反掌。\n\n* 开发者已经发现Dart非常容易掌握，因为它具有对无论是使用静态语言或是动态语言的用户来说都熟悉的特性。\n\n尽管这些特性不是Dart独有的，但是他们完美地结合在一起，让Dart在实现Flutter时变得无与伦比的强大。\n\n![](pic_02.jpeg)\n\n文章的剩余部分会深入到Dart的大量特性（包括它的标准库），这些特性让Dart成为了*实现Flutter最好的编程语言*。\n\n### 编译和执行\n\n*\\[如果您已经了解静态和动态语言、AOT和JIT编译、虚拟机等主题，您可以跳过本章节\\]*\n\n从历史上来看，计算机语言被分成了两组：静态语言（例如：Fortran或C，这些语言的变量在编译期是静态类型）和动态语言（例如：Smalltalk或者Javascript，这些语言的变量在运行时类型可以改变）。静态语言一般被编译产出为目标机器的本地机器码，在运行时直接被硬件执行。动态语言不会产生机器码，被解释器执行。\n\n当然，事情通常会变得越来越复杂。虚拟机(VM)的概念开始变得流行，它其实只是一个高级的解释器，用软件模拟一个硬件。虚拟机能够很容易地把一个语言移植到新的硬件平台。在这种情况下，VM的输入语言经常是一个中间语言。例如，一个编程语言（比如Java）被编译为中间语言（字节码）然后在VM（JVM）上被执行。\n\n此外，现在还出现了[*just-in-time*](https://en.wikipedia.org/wiki/Just-in-time_compilation)(JIT)编译器。JIT编译器在程序执行期间运行，动态编译。之前在程序创建期间执行的编译器现在被称作[*ahead-of-time*](https://en.wikipedia.org/wiki/Ahead-of-time_compilation)(AOT)编译器。\n\n一般来讲，只有静态语言才能被AOT编译为机器码，因为机器语言一般需要知道数据的类型，而在动态语言里类型在运行前是不固定的。因此，动态语言一般被解释或JIT编译。\n\n开发期间，当AOT编译完成时，它总是会导致一个相对较慢的开发周期（改动一段代码到执行代码看到改变的结果的时间）。但是AOT编译使程序可以更加可预测地执行，没有因为代码解析而暂停和运行时编译。AOT编译的程序运行速度也更快（因为他们已经被编译过）。\n\n相反，JIT编译提供了更快速的开发周期，但是导致了更慢的或更不稳定的运行。特别是JIT编译器有着非常慢的启动速度，因为当程序开始运行时，JIT编译器在代码可以被执行前必须去做解析和编译。研究已经表明[*很多人在应用启动时间超过数秒后会放弃使用*](https://www.google.com/search?q=slow+startup+times+lead+to+abandonment)。\n\n背景知识介绍完毕。试想一下如果把AOT和JIT的优点结合起来会不会很酷呢？请继续阅读。\n\n### 编译和执行Dart\n\n在研究Dart前，Dart团队成员在先进的编译器和虚拟机方面做了突破性的工作，两者都是服务于动态语言（就像V8之于JavaScript， Strongtalk之于Smalltalk）。他们使用这个经验把Dart如何被编译和执行变得异常灵活。\n\nDart是非常少有的、非常适合的一种同时可以被AOT和JIT编译的语言。支持两种类型的编译为Dart特别是Flutter带来了显著的优势。\n\nJIT编译被用于开发期间，使用一个极其快速的编译器。之后当应用准备发布时，使用AOT编译。因此，在先进的工具和编译器的帮助下，Dart兼具两种编译方式的优点：极其快速的开发周期、快速的执行和启动时间。\n\nDart在编译期和执行期的灵活性还不止于此。例如，Dart可以被编译为Javascript，所以它可以在浏览器里运行。这个允许代码在mobile和web端间复用。开发者报告说他们的代码在mobile和web间复用率达到70%。Dart同样可以被编译为机器代码在在服务端使用，或者编译为Javascript搭配nodejs使用。\n\n最后，Dart还提供了独立的VM，使用dart语言本身作为中间语言。\n\nDart可以高效地被AOT或JIT编译、解释或编译为其他语言。Dart的编译和执行不但异常灵活，并且非常迅速。\n\n下一节提供一个例子来展示Dart的编译速度是如何成为游戏的改变者。\n\n### Stateful hot reload\n\nFlutter最受欢迎的特性之一是它的极其快速的hot reload。在开发期间，Flutter使用JIT编译，JIT可以在不到一秒的时间内重加载和继续执行代码。应用的的状态在重加载时只要有可能就会被保留, 所以用用可以从上一次离开的状态继续执行。\n\n![](pic_03.gif)\n\n很难领会在开发时真正迅速的hot reload有多么重要，除非你自己亲身体验。开发者报告说说它改变了他们开发应用的方式，并描述为就像[绘制他们的应用到生活里](https://github.com/zilongc/blog/issues/3)。\n\n下面是一个mobile应用开发者说的关于Flutter的hot reload：\n\n> 我想要测试hot reloading, 所以我改了一个颜色，保存修改，然后...坠入爱河❤️ !\n\n> 这个特性真的非常不可思议。我以前认为Visual Studio的**编辑 & 继续**很好，但是这个更加令人震惊。只用这个，我认为一个mobile开发者的生产效率可以提高两倍。\n\n> 对于我来说这个特性真的是游戏的改变者。当我部署代码时，花费了大量时间，我失去了我的注意力，我从其他事情再回到模拟器/设备时我已经忘记了我想要测试的东西。还有什么比失去5分钟去控制2px更令人沮丧的呢？使用Flutter这些都不再发生。\n\nFlutter的hot reload同时让测试新想法、试验新东西变得容易，为创新提供了巨大的推动力。\n\n到此为止，我们已经讨论了Dart是怎么让开发者的工作变得美好的。下一节是关于Dart同样使在创建流畅的应用方面取悦用户变得简单。\n\n### 避免卡顿\n\n一个快速的应用很棒，但是一个流畅的应用更胜一筹。就算再快的动画如果中间卡顿也会看起来很糟糕。但是，避免卡顿很难做到，因为这里有种种因素。Dart有大量特性可以用来避免引起卡顿的很多常见的东西。\n\n当然，（像其他语言一样）在Flutter里仍然存在写出卡顿应用的可能；Dart通过更加的可预测性和提供给开发者对应用的流畅度更多的控制，使提供最好的用户体验变得有可能，而不是没有。\n\n结果呢？\n\n> 运行在60fps，用Flutter创建的用户界面的表现远比其他跨平台框架创建的要好的多。\n\n同时不仅比跨平台应用更好，甚至和最好的原生应用一样好。\n\n### AOT编译和\"bridge\"\n\n我们已经讨论了一个让应用保持流畅的特性，它是Dart被AOT编译为机器码的能力。预编译的AOT代码比JIT更加可预测，因为没有运行时进行JIT解析或编译带来的暂停。\n\n但是，AOT编译还有更大的好处，那就是避免\"Javascript Bridge\"。当动态语言（像Javascript）在平台里需要和本地语言交互时，他们必须通过一个bridge通信，这会导致上下文的切换，伴随着必须保存一份特别大的状态(潜在的二级存储)。这些上下文切换祸不单行，因为他们不仅会把速度减慢，同时他们还会导致严重的卡顿。\n\n![](pic_04.png)\n\n注：甚至使编译后的代码也需要一个接口和平台代码通话，这也可以称作bridge，但是通常比动态语言要求的bridge快的多。此外，由于Dart允许应用里有像组件这样的东西，所以用桥通信的需求被缩减。\n\n### 抢占式调度，时间切片和资源共享\n\n大部分支持多线程的计算机语言采用抢占的方式在线程间切换。每个线程被分配一个可执行的时间\\`切片\\`，如果线程超出了它分配的时间，那么线程通过使用上下文切换被抢占。但是，如果抢占发生在线程间共享的资源正在被更新时，那么这会导致一个[race condition](https://en.wikipedia.org/wiki/Race_condition).\n\nRace conditions是一个灾难，因为他们可以引起很多严重的bug，包括让你的应用崩溃和导致数据丢失，同时他们很难被发现和修复，因为他们依赖独立线程的相对时间。\n\n解决race condition的常用方法是使用锁来保护共享资源，用来防止其他线程执行，但是锁住他们自己可以引起卡顿，或者[更严重的问题](https://en.wikipedia.org/wiki/Dining_philosophers_problem)（包括[死锁](https://en.wikipedia.org/wiki/Deadlock)和[Starvation](https://en.wikipedia.org/wiki/Starvation_%28computer_science%29)）。\n\nDart采取了不一样的方案来解决这个问题。Dart的线程叫做isolates，不会共享内存，从而避免了大多数锁的需求。Isolates通信通过管道发送信息，这个方式和Erlang的actor或者Javascript的web worker类似。\n\nDart, 和Javascript一样是单线程，这意味着它从根源不允许抢占。相应的，线程显式地求值(yield)（通过async/await, Future, 或者Stream）。这种方式给开发者在执行上更多的控制。单线程帮助开发者保证关键的函数被执行完，没有抢占。这不仅对构建用户界面是个巨大的优势，而且对客户端-服务端代码也是。\n\n当然，如果开发者忘记显示的求值(yield)，这可能会延缓其他代码的执行。但是，我们发现忘记求值通常要比忘记上锁更容易被发现和修正(因为race condition很难被发现)。\n\n### 分配和垃圾回收\n\n另一个重要的卡顿原因是垃圾回收。事实上，这只是访问共享资源(内存)的一个特例，这在很多语言里需要使用锁。虽然空闲内存被回收了，但是锁可能会使整个应用从运行中停止。但是，Dart可以在执行垃圾回收的几乎所有时间里不需要锁。\n\nDart使用一种更先进的[分代垃圾回收和分配](https://en.wikipedia.org/wiki/Tracing_garbage_collection#Generational_GC_.28ephemeral_GC.29)方案，这种方案在分配短暂回收的对象时异常迅速(完美适配像Flutter这种每一帧都需要重新编译不可变的视图树的响应式用户界面)。Dart可以用一个pointer bump来分配对象(不需要锁)。再一次，结果是流畅的滑动和动画，没有卡顿。\n\n### 统一的布局\n\n另一个Dart的优势是Flutter不会在你的程序和附加的模板或布局语言(像JSX或XML)间拆分布局，它也不需要独立的视觉布局工具。下面是一个简单的Flutter视图，用Dart编写：\n\n```dart\nnew Center(child:\n  new Column(children: [\n    new Text('Hello, World!'),\n    new Icon(Icons.star, color: Colors.green),\n  ])\n)\n```\n\n![](hello_world_flutter.png)\n\n注意看，这段代码的产出到视觉化是多么的简洁。（即使你没有使用Dart的经验）\n\n同时，随着[Dart 2](https://www.dartlang.org/dart-2)的即将发布，代码会变得更加简单，因为`new`和`const`关键字变成了可选的，所以静态布局可以看起来像是用声明式布局语言写的一样：\n\n```dart\nCenter(child:\n  Column(children: [\n    Text('Hello, World!'),\n    Icon(Icons.star, color: Colors.green),\n  ])\n)\n```\n\n然而，我知道你可能在想 -- 缺少专业的布局语言怎么能被称作为一个优势呢？但是它确实使一个游戏的改变者。下面来自于一个开发者写的一篇名为[\"为什么原生应用的开发者应该严肃对待Flutter\"](https://hackernoon.com/why-native-app-developers-should-take-a-serious-look-at-flutter-e97361a1c073)的文章。\n\n> 在Flutter里，布局只用Dart代码来定义。这里没有XML/模板语言。这里也没有视觉设计/storyboarding工具\n\n> 我的预感是，听到这个消息后，有些人甚至会有点畏缩。乍一看，这也是我的反应。使用可视化工具进行布局不是很容易吗? 在代码中编写各种约束逻辑不会使事情变得过于复杂吗?\n\n> 对于我答案最后证明是不。我的天！这是多么令人惊奇的事啊。\n\n回答的第一部分是上面提到的hot reload。\n\n> 我无法更加强调这要比Android的Instant Run或者类似的解决方案早多少年。它就是很管用，即使在大型应用上。同时它非常快。这是Dart带给你的力量。\n\n> 在实际使用中，这使视觉编辑器变成冗余的。我并没有错过XCode的非常好的自动布局。\n\nDart创建简洁易懂的布局，而\"极其快速\"的hot reload让你马上就能看到结果。同时包括你的布局里的非静态部分。\n\n> 因此，我在Flutter (Dart)中比Android/XCode更多产。一旦你掌握了它的窍门(对我来说这意味着几周的时间)，就会有大量的开销减少，因为发生的上下文切换非常少。你不必切换到设计模式，选择鼠标并开始点击。然后想知道是否需要通过编程来完成，如何实现等等，一切都是程序化的。这些api设计得很好。它很快就变得直观起来，并且比自动布局/布局XMLs提供的构建更强大。\n\n例如，下面是一个简单的列表布局，它为每一项添加分割线(水平线)，程序化定义：\n\n```dart\nreturn new ListView.builder(itemBuilder: (context, i) {\n  if (i.isOdd) return new Divider();\n  // rest of function\n});\n```\n\n在Flutter里，所有的布局出现在一个地方，不管它使静态布局或者使程序化布局。同时，[新的Dart tools](https://groups.google.com/forum/#!topic/flutter-dev/lKtTQ-45kc4)，包括Flutter Inspector和outlint view使复杂的、美丽的布局更加简单。\n\n### Dart是一个专利语言吗？\n\n不，Dart（像Flutter一样）是完全开源的，有着干净的协议，同时也是ECMA的标准。Dart在Google内外都非常受欢迎。在Google内部它使一个成长迅速的语言，被用在Adwords，Flutter，Fuchsia和其它产品里；在外部，Dart仓库有超过100多个的外部贡献者。\n\nDart开放的更好的标志是Google外部社区的成长。比如，我们从第三方正在看到源源不断的关于Dart的文章和视频（包括Flutter和AngularDart）,一部分我在这篇文章里引用过。\n\n除了Dart本身外部的贡献者，在Dart的公共库里有超过3000个包，包括像Firebase, Redux, RxDart, 国家化, 加密, 数据库, 路由, 集合等等库。\n\n### Dart程序员很难找吗？\n\n如果没有很多程序员知道Dart，寻找合格的程序员会更困难吗？回答使明确的不。Dart是一个非常容易掌握的语言。事实上，已经知道像Java, JavaScript, Kotlin, C# 或者 Swift等语言的程序员，可以几乎可以立即使用Dart开始编程。\n\n这是一名程序员在一篇题为\"[为什么Flutter会在2018年起飞](https://codeburst.io/why-flutter-will-take-off-in-2018-bbd75f8741b0)\"的文章中说的:\n\n> Dart, 开发Flutter应用的语言，学习上非常简单。\n> Google在创造简单、良好文档化的语言方面很有经验，例如Go。到目前为止，对于我，Dart让我想起了Ruby，学习它很开心。不仅使为了mobile开发，也是为了web开发。\n\n从另外一篇关于Flutter和Dart的文章，标题为\"为什么是Flutter？而不是框架X？\"\n\n> Flutter使用Google创建的语言Dart，说实话我不是强类型语言像C#或Java的拥簇，但是我不知道为什么Dart写代码的方式看起来不一样。我在编写的时候感觉非常舒服。也许使因为它非常容易理解和直接。\n\nDart被特别地设计为熟悉的和易于学习的，在通过大量的UX调研和测试后。例如，在2017年上半年，Flutter团队对8个开发人员做了UX调研。我们给了他们Flutter简短的介绍，然后让他们放松一个小时左右，创建一个简单的视图。所有的参与者都能马上开始编程，即使他们以前从来没有用过Dart。他们专注在开发响应式布局上，而不是语言上。Dart只是很有效。\n\n最后，有一个参与者(他在任务中取得了很大进步)没有提到任何关于语言的东西，所以我们问他们是否意识到他们使用的是什么语言。他们不知道。语言并不重要;他们在几分钟内就可以用Dart编程。\n\n学习新系统的难点通常不是学习语言，而是学习语言的所有库、框架、工具、模式和最佳实践，从而写出好的代码。Dart的库和工具都有非常好的文档。有一篇文章称“作为福利，他们也对他们的代码库保持着极大的关注，他们拥有我所见过的最好的文档。”\n\n作为直接的证据，Google内部的一个大项目想要做把手机端应用转到iOS。他们本来想要雇佣一些iOS工程师但是决定去尝试Flutter。他们统计了在Flutter上开发人员的需要多长时间才能全速开发。结果显示一个程序员在三周内就可以学会Dart和Flutter并富有成效。对比使用Android需要五周时间（没有提到使用iOS）。\n\n最后，在文章[为什么我们选择Flutter和它如何让我们的公司变得更好](https://medium.com/@matthew.smith_66715/why-we-chose-flutter-and-how-its-changed-our-company-for-the-better-271ddd25da60)里，一个公司把他们的大型商业应用从三个平台（iOS, Android和web）迁移到Dart，他们的结论是：\n\n> 更简单的招聘。我们现在要考虑的是最好的候选人，无论他们来自Web，iOS还是Android。\n\n> 我们现在有3x的带宽，我们团队里的所有人现在统一到一个代码库里。\n\n> 知识共享处于一个空前的高峰。\n\n他们使用Dart和Flutter可以有三倍的生产力。考虑到他们之前所做的事情，这并不奇怪。他们就像很多公司一样，以前为每一个平台(web, iOS和Android)，使用分离的语言、工具和程序员来开发独立的应用。切换到Dart意味着他们不在需要雇佣不同种类的程序员。同时现有的程序员转到Dart非常容易。\n\n他们和其他公司一样发现一旦程序员开始使用Flutter，他们会真的喜欢上Dart。他们喜欢这个语言的简洁和务实。他们喜爱这个语言的特性诸如cascades, named parameters, async/await和streams。更重要的是，他们喜欢Dart才能实现的Flutter特性，Dart帮助他们构建的漂亮的、高性能的应用。\n\n### Dart 2\n\n随着这篇文字的发表，[Dart 2](https://www.dartlang.org/dart-2)已经发布。Dart 2关注提升开发客户端应用的体验，包括开发速度，改进开发者工具和类型安全。例如，Dart 2实现了一个[声音类型系统](http://papl.cs.brown.edu/2014/safety-soundness.html)和[类型推断](https://en.wikipedia.org/wiki/Type_inference)。\n\nDart 2同时把`new`和`const`关键字变成可选的。这意味着Flutter的视图可以在根本不使用任何关键字的情况下被描述，少了凌乱，更容易易读。例如：\n\n```dart\nWidge build(BuildContext context) =>\n  Container(\n    height: 56.0,\n    padding: EdgeInsets.symmetric(horizontal: 8.0),\n    decoration: BoxDecoration(color: Colors.blue[500]),\n    child: Row(\n      ...\n    ),\n);\n```\n\nDart 2自动识别出所有的构造函数，以及\"padding:\"的值是一个常数。\n\n### 秘密是专注\n\nDart 2的改进是专注在客户端开发的优化。但是Dart还将是构建服务端、桌面端、嵌入式系统或者其他程序的伟大语言。\n\n专注是一个好东西。几乎所有经久不衰的流行语言都受益于非常专注。例如：\n\n* C是一个编写操作系统的系统程序语言。 \n* Java被设计用在嵌入式系统。\n* JavaScript是浏览器的脚本语言。\n* 即使是饱受诟病的PHP也成功了，因为它专注于写个人主页(Personal Home Pages)(它的名字就是从这来的)。\n\n另一方面，很多语言都明确尝试成为一个全平台的语言，例如PL/1和Ada等。最常见的问题是，如果没有专注，这些语言就会变成众所周知的厨房洗涤剂。\n\n很多特性使Dart成为一个伟大的客户端语言，同时也使它成为一个更好的服务端语言。例如，事实上Dart避免抢占式的多任务给了它在服务端和Node相同的优点，但是还多了更好的特性和更安全的类型。\n\n这些优点同样可以出现在编写嵌入式系统上。Dart处理多并发的能力是关键。\n\n最后，Dart在客户端的成功会最终在服务端上使用它产生更多的兴趣-- 正像发生在JavaScript和Node上的事情一样。为什么要强迫认为使用两种不同的语言来开发客户端-服务端软件呢？\n\n### 结论\n\n现在是Dart令人兴奋的时刻。使用Dart的人们喜爱它，而Dart 2的新功能使它成为你的工具库中更有价值的补充。如果你没有使用过Dart，我希望这篇文章为你提供了关于Dart的新的或者不同的有价值的信息，并且你会尝试用一下Dart和Flutter。\n","date":"2018-01-26"}]}}