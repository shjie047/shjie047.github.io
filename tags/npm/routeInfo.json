{"path":"tags/npm","templateID":3,"sharedPropsHashes":{},"localProps":{"posts":[{"author":"Travis Fischer","title":"那些值得一用的JS库","tags":["Javascript","frontend","前端","NodeJS","Node","npm"],"iso8601Date":"2018-03-10T08:00:00+08:00","basename":"JavaScript_Modules_Worth_Using","body":"\n\n本文收集了前端JS开发和NodeJS开发中的一些优秀的库和工具。\n\n## 1. 命令行工具\n\n> [np](https://github.com/sindresorhus/np) - 更好的`npm publish`\n\n如果你是一个npm作者，强烈推荐使用[np](https://github.com/sindresorhus/np)模块，它能为你轻而易举地解决更新版本、添加git发布tag和发布代码到npm，特别是当你有很多npm模块要维护的时候。\n\n> [yarn](https://yarnpkg.com/) - 更好的包管理工具，同时兼容npm\n\n虽然npm v5已经比上一个版本速度提升很多，但是个人感觉在本地开发中yarn仍然以速度和稳定性取胜。但是无论用哪个工具，你都在使用同一个npm包的数据，究竟两者孰优孰劣并没有定论，所以挑选哪个工具还是要看你的项目需求。\n\n> [prettier](https://prettier.io/) - 强烈推荐的一款代码格式化工具\n\nPrettier通过代码解析强制要求代码风格保持一致，然后用内置的规则来重新输出样式，并通过必要的代码封装来限制代码最大行数。\n\n> [now](https://zeit.co/now)\n\nNow毫无疑问是迄今为止最好的免费部署系统，以简单、稳定和功能多著称。它非常适合测试静态和动态部署，并且很方便扩充服务器。\n\n> [asciinema](https://asciinema.org/) - 录制高质量的终端(terminal)信息\n\n一款录制终端 & 代码的神器，从此分享代码告别截屏！\n\n## 2. Promise\n\n这一小节值得专门拿出来写一篇文章，尤其现在`async/await`已经成为JS的并发编程的标准。这里收集了一些Node端非常有用的Promise相关库：\n\n> [pify](https://github.com/sindresorhus/pify) - 转换callback为promise\n\n目前有很多方法都可以把过时的callback-style的代码转成promise-style，但是pify可能是其中最好的解决方案。它体积很小，同时有util.promisify(node本地接口)没有的一些细节：比如方法自动绑定等。\n\n> [p-map](https://github.com/sindresorhus/p-map) - 给并行设置限制数\n\n并行虽然很好，但是大多时候出于带宽或者计算资源的考虑需要设置一个对并行的限制，这是p-map擅长的领域。它可以取代不支持限制并行的`Promise.all()`方法。\n\n> [p-retry](https://github.com/sindresorhus/p-retry) - 给promise请求添加重新请求机制\n\n通常在发送http请求或者外部服务调用的时候可以用p-retry在外部封装一层，提高请求的健壮性。\n\n> [p-timeout](https://github.com/sindresorhus/p-timeout) - 为promise请求添加超时处理\n\n为promise请求指定一个超时时间，然后添加超时处理方案\n\n### 3. 数据抓取\n\n有很多很棒的抓取工具，有一些直接操作HTML，像[cheerio](https://github.com/cheeriojs/cheerio)，还有一个些可以模拟一个完整的浏览器环境像[puppeteer](https://github.com/GoogleChrome/puppeteer)。具体使用哪种工具还是要依赖使用场景。\n\n> [cheerio](https://github.com/cheeriojs/cheerio) - 快速、灵活和实现核心jQuery Api，服务于服务端\n\n当你想操作HTML时，Cheerio非常适合快速 & 肮脏的web数据抓取。它提供了健壮的类jQuery语法，用来遍历和处理HTML文档。在抓取远程HTML文档时，Cheerio和下面要介绍的[require-promise-native](https://github.com/request/request-promise-native)非常适合搭配一起使用。\n\n> [puppeteer](https://github.com/GoogleChrome/puppeteer) - Headless Chrome Node API\n\n和cheerio不同，puppeteer是在[headless Chrome](https://developers.google.com/web/updates/2017/04/headless-chrome)(没有UI的Chrome，供服务端自动化测试用)外包装的一层高级API，通过[开发工具协议](https://chromedevtools.github.io/devtools-protocol/)控制headless Chrome或者Chromium，它也可以通过配置来使用全部Chrome或者Chromius的功能。\n\n### 4. Node.js\n\n> [dotenv-safe](https://github.com/rolodato/dotenv-safe) - 从`.env`里加载环境变量\n\n这个模块扩展了非常流行的库[dotenv](https://github.com/motdotla/dotenv)，通过添加一个`.env.example`文件强制保证预期环境变量的存在。与原始版本一样，它为Node提供了快速的、安全的和健壮的环境变量。\n\n> [request](https://github.com/request/request)和[request-promise-native](https://github.com/request/request-promise-native) - 简单的HTTP请求客户端\n\n发送HTTP请求是一个极其常用的操作，常用的库是[request-promise-native](https://github.com/request/request-promise-native)，它封装了[request](https://github.com/request/request)库，并提供了本地ES6的`Promise`支持。\n\n> [consolidate](https://github.com/tj/consolidate.js) - Node的模板引擎整合库\n\nConsolidate可以非常漂亮的处理任何后端模板（email, html等等）。它提供了简单、稳定的各种模板引擎接口。\n\n> [execa](https://github.com/sindresorhus/execa) - 更好的`child_process`\n\n在需要执行shell命令或者spawn一个子进程时极其有用\n\n> [fs-extra](https://github.com/jprichardson/node-fs-extra) - 更好的`fs`，拥有更多方法和Promise支持\n\n### 5. 数学\n\n[d3-random](https://github.com/d3/d3-random) - 生成各种分布的随机数\n\n[d3-ease](https://github.com/d3/d3-ease) - 产生流畅动画的Easing函数\n\n### 6. 测试\n\n[ava](https://github.com/avajs/ava) - 很棒的JS test runner\n\nAva是比较新的JS单元测试工具，它具有众多JS测试库(Mocha、tape、chai和其他库)的优点，默认情况下采用并行运行的方式。\n\n[nock](https://github.com/node-nock/nock) - HTTP模拟请求\n\nNock是一个很棒的测试HTTP请求的库。如果你的Node模块需要发送HTTP请求，并且你想要对这个请求做单元测试，那么nock是你的不二之选。\n","date":"2018-03-10"}]}}