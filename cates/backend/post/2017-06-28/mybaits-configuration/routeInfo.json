{"path":"cates/backend/post/2017-06-28/mybaits-configuration","templateID":1,"sharedPropsHashes":{"tags":"1C8cqm"},"localProps":{"post":{"title":"MyBatis 配置","cover":"http://p6jqy6mfr.bkt.clouddn.com/stock-photo-248219739.jpg","iso8601Date":"2017-06-28T22:13:32+08:00","basename":"mybaits-configuration","tags":["Java","Mybatis","Translate","Backend"],"date":"2017-06-28","cate":"backend","summary":"原文链接\n\nMyBatis的配置包含了设置和属性，他们对MyBatis的行为有很大的影响。MyBatis的配置文件层次结构如下：\n configuration\n     properties\n     settings\n     typeAliases\n     typeHandlers\n     objectFactory\n     plugins\n     environments\n         environment\n             transactionManager\n             dataSource\n     databaseIdProvider\n    * mappers\n\nproperties\n\n可以通过一个典型的Java Properties 类实例配置可替换的外部属性，也可以通过子元素传递这些配置属性，例如\nxml\n&lt;properties resource=&quot;org/mybatis/example/config.properties&quot;&gt;\n  &lt;property name=&quot;username&quot; value=&quot;dev_user&quot;/&gt;\n  &lt;property name=&quot;password&quot; value=&quot;F2Fa3!33TYyg&quot;/&gt;\n&lt;/properties&gt;\n\n然后这些配置属性就可以应用于配置文件中需要动态配置的其他属性。例如：\nxml\n&lt;dataSource type=&quot;POOLED&quot;&gt;\n  &lt;property name=&quot;driver&quot; value=&quot;${driver}&quot;/&gt;\n  &lt;property name=&quot;url&quot; value=&quot;${url}&quot;/&gt;\n  &lt;property name=&quot;username&quot; value=&quot;${username}&quot;/&gt;\n  &lt;property name=&quot;password&quot; value=&quot;${password}&quot;/&gt;\n&lt;/dataSource&gt;\n\n在这个例子中的username和password将会被properties的配置属性替换。driver和url属性会被config.properties的配置替换。这个为配置提供了很多的选项。  Properties同样可以直传入SqlSessionFactoryBuild.build() 方法中，例如：\n`Java\nSqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, props);\n\n// ... or ...\n\nSqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment, props);\n`\n如果同一个属性同时配置到不同的位置，MyBatis按照如下的顺序加载它们：  1. 在Properties内的子元素首先被加载。   2. 其次从resource classpath和url中加载属性并覆盖已存在的属性。  3. 作为方法参数的属性最后被加载，并且覆盖前面两次相同的属性。\n\n因此，优先级最高的是直接作为参数传入方法，其次是从resource classpath或者url加载的配置文件，最后是Properties中的子元素定义的属性。  MyBatis 3.4.2 之后可以如下使用默认占位符。\nxml\n&lt;dataSource type=&quot;POOLED&quot;&gt;\n  &lt;!-- ... --&gt;\n  &lt;property name=&quot;username&quot; value=&quot;${username:ut_user}&quot;/&gt; &lt;!-- If &#39;username&#39; property not present, username become &#39;ut_user&#39; --&gt;\n&lt;/dataSource&gt;\n\n这个功能默认是无效的，如果要开启这个功能，需要在配置属性中如下开启：\nxml\n&lt;properties resource=&quot;org/mybatis/example/config.properties&quot;&gt;\n  &lt;!-- ... --&gt;\n  &lt;property name=&quot;org.apache.ibatis.parsing.PropertyParser.enable-default-value&quot; value=&quot;true&quot;/&gt; &lt;!-- Enable this feature --&gt;\n&lt;/properties&gt;\n\n注意：如果已经使用了“：”作为属性的键例如：db:username，或者是在sql的定义中使用了OGNL的三元符，例如：${tableName != null ? tableName : &#39;global_constants&#39;}那么就需要修改默认的分隔符，如下：\nxml\n&lt;properties resource=&quot;org/mybatis/example/config.properties&quot;&gt;\n  &lt;!-- ... --&gt;\n  &lt;property name=&quot;org.apache.ibatis.parsing.PropertyParser.default-value-separator&quot; value=&quot;?:&quot;/&gt; &lt;!-- Change default value of separator --&gt;\n&lt;/properties&gt;\n\nxml\n&lt;dataSource type=&quot;POOLED&quot;&gt;\n  &lt;!-- ... --&gt;\n  &lt;property name=&quot;username&quot; value=&quot;${db:username?:ut_user}&quot;/&gt;\n&lt;/dataSource&gt;\n","readingtime":4,"url":"/cates/backend/post/2017-06-28/mybaits-configuration","dirs":["mybatis"],"relatives":[{"url":"/cates/backend/post/2017-03-21/mybatis-started","title":"mybatis 入门"}],"body":"\n\n[原文链接](http://www.mybatis.org/mybatis-3/configuration.html)\n\nMyBatis的配置包含了设置和属性，他们对MyBatis的行为有很大的影响。MyBatis的配置文件层次结构如下：\n* configuration\n    * properties\n    * settings\n    * typeAliases\n    * typeHandlers\n    * objectFactory\n    * plugins\n    * environments\n        * environment\n            * transactionManager\n            * dataSource\n    * databaseIdProvider\n    * mappers\n\n### properties\n可以通过一个典型的Java Properties 类实例配置可替换的外部属性，也可以通过子元素传递这些配置属性，例如\n```xml\n<properties resource=\"org/mybatis/example/config.properties\">\n  <property name=\"username\" value=\"dev_user\"/>\n  <property name=\"password\" value=\"F2Fa3!33TYyg\"/>\n</properties>\n```\n然后这些配置属性就可以应用于配置文件中需要动态配置的其他属性。例如：\n```xml\n<dataSource type=\"POOLED\">\n  <property name=\"driver\" value=\"${driver}\"/>\n  <property name=\"url\" value=\"${url}\"/>\n  <property name=\"username\" value=\"${username}\"/>\n  <property name=\"password\" value=\"${password}\"/>\n</dataSource>\n```\n在这个例子中的username和password将会被properties的配置属性替换。driver和url属性会被config.properties的配置替换。这个为配置提供了很多的选项。    \nProperties同样可以直传入SqlSessionFactoryBuild.build() 方法中，例如：\n```Java\nSqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, props);\n\n// ... or ...\n\nSqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment, props);\n```\n如果同一个属性同时配置到不同的位置，MyBatis按照如下的顺序加载它们：    \n1. 在Properties内的子元素首先被加载。     \n2. 其次从resource classpath和url中加载属性并覆盖已存在的属性。    \n3. 作为方法参数的属性最后被加载，并且覆盖前面两次相同的属性。\n\n因此，优先级最高的是直接作为参数传入方法，其次是从resource classpath或者url加载的配置文件，最后是Properties中的子元素定义的属性。    \nMyBatis 3.4.2 之后可以如下使用默认占位符。\n```xml\n<dataSource type=\"POOLED\">\n  <!-- ... -->\n  <property name=\"username\" value=\"${username:ut_user}\"/> <!-- If 'username' property not present, username become 'ut_user' -->\n</dataSource>\n```\n这个功能默认是无效的，如果要开启这个功能，需要在配置属性中如下开启：\n```xml\n<properties resource=\"org/mybatis/example/config.properties\">\n  <!-- ... -->\n  <property name=\"org.apache.ibatis.parsing.PropertyParser.enable-default-value\" value=\"true\"/> <!-- Enable this feature -->\n</properties>\n```\n注意：如果已经使用了“：”作为属性的键例如：`db:username`，或者是在sql的定义中使用了OGNL的三元符，例如：`${tableName != null ? tableName : 'global_constants'}`那么就需要修改默认的分隔符，如下：\n```xml\n<properties resource=\"org/mybatis/example/config.properties\">\n  <!-- ... -->\n  <property name=\"org.apache.ibatis.parsing.PropertyParser.default-value-separator\" value=\"?:\"/> <!-- Change default value of separator -->\n</properties>\n```\n```xml\n<dataSource type=\"POOLED\">\n  <!-- ... -->\n  <property name=\"username\" value=\"${db:username?:ut_user}\"/>\n</dataSource>\n```\n"}}}