{"path":"tags/HTTP/2","templateID":4,"sharedPropsHashes":{"tags":"Zpc8p0"},"localProps":{"posts":[{"title":"HTTP/2 和GO","iso8601Date":"2015-11-12T19:39:21+08:00","basename":"HTTP-2-And-GO","cover":"https://coding.net/u/shjie047/p/images/git/raw/master/stock-photo-252006883.jpg","tags":["Http","HTTP/2","Translate","Go","Backend"],"date":"2015-11-12","cate":"Backend","summary":"原文地址\n\nHTTP/2是一个添加了一些新功能的HTTP的新版本，这些功能包括连接复用，首部压缩。再Go的标准库中暂时还没有HTTP/2的实现，但是现在有很多正在开发的库可以用来在Go中实现HTTP/2的server和client。\n\nBrad Fitzpatrick实现了一个golang.org/x/net/http2的库，这个库甚至最终会加入到标准库中，不过他现在正在开发，所以在其他的库中。因为他现在的开发很活跃，所有情况因人而异，但是如果你想实现HTTP/2的服务器，仍然可以使用这个库。\n\n创建HTTP/2服务器\n\n使用http2的库写一个服务器是很简单的。http2库和标准库的http包集成在一起，需要调用http2.ConfigureServer()来配置一个普通http使用HTTP/2协议。如果需要通过浏览器访问或者降级到HTTP 1.x 协议，那么你需要设置TLS 加密。虽然加密不是必须的，但是现在还没有浏览器支持非加密的HTTP/2协议。\n\n`Go\npackage main\n\nimport (\n    &quot;log&quot;\n    &quot;net/http&quot;\n    &quot;os&quot;\n\n&quot;golang.org/x/net/http2&quot;\n\n)\n\nfunc main() {\n    cwd, err := os.Getwd()\n    if err != nil {\n        log.Fatal(err)\n    }\n\nsrv := &amp;http.Server{\n    Addr:    &quot;:8000&quot;, // Normally &quot;:443&quot;\n    Handler: http.FileServer(http.Dir(cwd)),\n}\nhttp2.ConfigureServer(srv, &amp;http2.Server{})\nlog.Fatal(srv.ListenAndServeTLS(&quot;server.crt&quot;, &quot;server.key&quot;))\n\n}\n`\n\n创建HTTP/2 客户端\n\n现在使用http2的库创建客户端很hacky。虽然它会输出很多调试日志，但是对于大多数情况下运行的很好。可以使用http2.Transport对象，将他传给http包的client。\n\n`Go\npackage main\n\nimport (\n    &quot;fmt&quot;\n    &quot;io/ioutil&quot;\n    &quot;log&quot;\n    &quot;net/http&quot;\n\n&quot;golang.org/x/net/http2&quot;\n\n)\n\nfunc main() {\n    client := http.Client{\n        // InsecureTLSDial is temporary and will likely be\n        // replaced by a different API later.\n        Transport: &amp;http2.Transport{InsecureTLSDial: true},\n    }\n\nresp, err := client.Get(&quot;https://localhost:8000/&quot;)\nif err != nil {\n    log.Fatal(err)\n}\n\nbody, err := ioutil.ReadAll(resp.Body)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Println(string(body))\n\n}\n`\n\n更多阅读\n\n如果你对HTTP/2协议感兴趣，那么可以参考HTTP/2 主页，这个页面有很多其他资料的连接还有其他语言的实现。\n\n如果你想知道HTTP/2的服务端和客户端是如何实现的，那么Jxck&#39;s http2 implementation的实现就很值得一读。Jxck通过对标准的HTTP库的TLSNextProto设置一个钩子来实现的。你可以再这里阅读一些示例。\n\ngrpc-go 库同样也有自己的服务端和客户端的实现。","readingtime":5,"url":"/cates/Backend/post/2015-11-12/HTTP-2-And-GO","dirs":["go"],"relatives":[{"url":"/cates/Backend/post/2015-11-11/Go-Web-architecture","title":"Go Web 架构"},{"url":"/cates/Backend/post/2015-11-15/create-a-homepage-for-Go-Web-App","title":"为Go Web App 创建一个主页面"},{"url":"/cates/Backend/post/2015-11-12/develop-HTTP-middleware-using-Go","title":"使用Go开发HTTP中间件"},{"url":"/cates/Backend/post/2015-11-13/http-Handler-And-Go-error-handle","title":"http.Handler 与Go的错误处理"}]}],"tag":"HTTP/2"}}